// Generated by CoffeeScript 1.7.1
(function() {
  var List, Widget, WidgetBase,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  WidgetBase = Widget;

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.namespace = WidgetBase.namespace;

    Widget.attrs = ["text", "html", "class", "value", "attribute", "src"];

    function Widget(template) {
      Widget.__super__.constructor.call(this, template);
      this.__defineGetter__("renderData", (function(_this) {
        return function() {
          if (_this.renderDataModel) {
            return _this.renderDataModel.data;
          } else {
            return null;
          }
        };
      })(this));
      this.__defineGetter__("Data", (function(_this) {
        return function() {
          return _this.renderData;
        };
      })(this));
      this.__defineSetter__("renderData", (function(_this) {
        return function(value) {
          if (_this.renderDataModel) {
            return _this.renderDataModel.data = value;
          }
        };
      })(this));
    }

    Widget.prototype.initTemplate = function(template) {
      var oldModel;
      oldModel = this.renderDataModel;
      this.renderDataModel = new Model();
      this.renderData = this.renderDataModel.data;
      Widget.__super__.initTemplate.call(this, template);
      this.initRenderData();
      if (oldModel) {
        this.renderData = oldModel.data;
        return oldModel.destroy();
      }
    };

    Widget.prototype.initRenderData = function() {
      var attrs, elem, elems, selector, _i, _len, _results;
      attrs = Widget.attrs;
      selector = (attrs.map(function(item) {
        return "[data-" + item + "]";
      })).join(",");
      elems = [].slice.call(this.node.querySelectorAll(selector));
      elems.push(this.node);
      _results = [];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        _results.push(this.applyRenderRole(elem));
      }
      return _results;
    };

    Widget.prototype.applyRenderRole = function(elem) {
      var attr, attrs, info, _i, _len, _results;
      attrs = Widget.attrs;
      _results = [];
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        attr = attrs[_i];
        if (info = elem.getAttribute("data-" + attr)) {
          _results.push(this["_" + attr + "Role"](elem, info));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Widget.prototype.removeRenderRole = function(elem) {
      return this.renderDataModel.stopListenBy(elem);
    };

    Widget.prototype._textRole = function(elem, who) {
      if (!this.renderDataModel.has(who)) {
        this.renderDataModel.declare(who);
      }
      return this.renderDataModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.textContent = value;
        };
      })(this));
    };

    Widget.prototype._htmlRole = function(elem, who) {
      if (!this.renderDataModel.has(who)) {
        this.renderDataModel.declare(who);
      }
      return this.renderDataModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.innerHTML = value;
        };
      })(this));
    };

    Widget.prototype._classRole = function(elem, whos) {
      var oldClass, who, _i, _len, _results;
      whos = whos.split(",").map(function(item) {
        return item.trim();
      }).filter(function(item) {
        return item;
      });
      _results = [];
      for (_i = 0, _len = whos.length; _i < _len; _i++) {
        who = whos[_i];
        if (!this.renderDataModel.has(who)) {
          this.renderDataModel.declare(who);
        }
        oldClass = "";
        _results.push(this.renderDataModel.listenBy(elem, "change/" + who, (function(_this) {
          return function(value) {
            if (value && elem.classList.contains(value)) {
              if (oldClass && elem.classList.contains(oldClass)) {
                elem.classList.remove(oldClass);
              }
              oldClass = value;
              return;
            }
            if (oldClass) {
              elem.classList.remove(oldClass);
            }
            if (value && !elem.classList.contains(value)) {
              elem.classList.add(value);
            }
            return oldClass = value;
          };
        })(this)));
      }
      return _results;
    };

    Widget.prototype._attributeRole = function(elem, whats) {
      var pair, _i, _len, _results;
      if (whats == null) {
        whats = "";
      }
      whats = whats.split(",").map(function(item) {
        return item.trim().split(":");
      }).filter(function(pair) {
        return pair.length === 1 || pair.length === 2;
      });
      _results = [];
      for (_i = 0, _len = whats.length; _i < _len; _i++) {
        pair = whats[_i];
        _results.push((function(_this) {
          return function(pair) {
            var name, who;
            name = pair[0];
            who = pair[1] || name;
            if (!_this.renderDataModel.has(who)) {
              _this.renderDataModel.declare(who);
            }
            return _this.renderDataModel.listenBy(elem, "change/" + who, function(value) {
              return elem.setAttribute(name, value);
            });
          };
        })(this)(pair));
      }
      return _results;
    };

    Widget.prototype._valueRole = function(elem, who) {
      return this._attributeRole(elem, "value:" + who);
    };

    Widget.prototype._srcRole = function(elem, who) {
      return this._attributeRole(elem, "src:" + who);
    };

    Widget.prototype.destroy = function() {
      this.renderDataModel.destroy();
      this.renderDataModel = null;
      this.renderData = null;
      return Widget.__super__.destroy.call(this);
    };

    return Widget;

  })(Widget);

  List = (function(_super) {
    __extends(List, _super);

    function List(template, create) {
      List.__super__.constructor.call(this, template);
      this.init(create);
      Object.defineProperty(this, "length", {
        get: (function(_this) {
          return function() {
            return _this._length;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            var index, item, toRemove, _i, _j, _len, _ref, _results;
            toRemove = [];
            if (value > _this._length) {
              throw "can't asign length larger than the origin";
            }
            if (value < 0) {
              throw "can't asign length lesser than 0";
            }
            if (typeof value !== "number") {
              throw new TypeError();
            }
            for (index = _i = value, _ref = _this.length; value <= _ref ? _i < _ref : _i > _ref; index = value <= _ref ? ++_i : --_i) {
              toRemove.push(_this[index]);
              delete _this[index];
            }
            _this._length = value;
            _results = [];
            for (_j = 0, _len = toRemove.length; _j < _len; _j++) {
              item = toRemove[_j];
              _results.push(_this._detach(item));
            }
            return _results;
          };
        })(this)
      });
    }

    List.prototype.init = function(create) {
      this.create = create || this.create || (function(_this) {
        return function(item) {
          return item;
        };
      })(this);
      this._length = 0;
      return this.node.innerHTML = "";
    };

    List.prototype.map = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].map.apply(this, args);
    };

    List.prototype.some = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].some.apply(this, args);
    };

    List.prototype.forEach = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].forEach.apply(this, args);
    };

    List.prototype.check = function(item) {
      var child, _i, _len, _results;
      if (!(item instanceof Widget)) {
        throw "Leaf List only accept widget as element";
      }
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        child = this[_i];
        if (child === item) {
          throw "already exists";
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    List.prototype.indexOf = function(item) {
      var child, index, _i, _len;
      for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
        child = this[index];
        if (item === child) {
          return index;
        }
      }
      return -1;
    };

    List.prototype.push = function(item) {
      item = this.create(item);
      this.check(item);
      this[this._length] = item;
      this._length++;
      item.appendTo(this.node);
      return this._attach(item);
    };

    List.prototype.pop = function() {
      var item;
      if (this._length === 0) {
        return null;
      }
      this._length -= 1;
      item = this[this._length];
      delete this[this._length];
      this._detach(item);
      return item;
    };

    List.prototype.unshift = function(item) {
      var index, _i, _ref;
      item = this.create(item);
      this.check(item);
      if (this._length === 0) {
        item.appendTo(this.node);
        this[0] = item;
        this._length = 1;
        this._attach(item);
        return;
      }
      for (index = _i = _ref = this._length; _ref <= 1 ? _i <= 1 : _i >= 1; index = _ref <= 1 ? ++_i : --_i) {
        this[index] = this[index - 1];
      }
      this[0] = item;
      this._length += 1;
      item.prependTo(this.node);
      this._attach(item);
      return this._length;
    };

    List.prototype.removeItem = function(item) {
      var index;
      index = this.indexOf(item);
      if (index < 0) {
        return index;
      }
      this.splice(index, 1);
      return item;
    };

    List.prototype.shift = function() {
      var index, result, _i, _ref;
      result = this[0];
      for (index = _i = 0, _ref = this._length - 1; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
        this[index] = this[index + 1];
      }
      this._length -= 1;
      this._detach(result);
      return result;
    };

    List.prototype.splice = function() {
      var achor, count, increase, index, item, offset, origin, result, toAdd, toAddFinal, toRemoves, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _o, _ref, _ref1, _ref2, _ref3;
      index = arguments[0], count = arguments[1], toAdd = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      result = [];
      toRemoves = [];
      if (typeof count === "undefined" || index + count > this._length) {
        count = this._length - index;
      }
      for (offset = _i = 0; 0 <= count ? _i < count : _i > count; offset = 0 <= count ? ++_i : --_i) {
        item = this[index + offset];
        toRemoves.push(item);
        result.push(item);
      }
      toAddFinal = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = toAdd.length; _j < _len; _j++) {
          item = toAdd[_j];
          _results.push(this.create(item));
        }
        return _results;
      }).call(this);
      if (index === 0) {
        for (_j = 0, _len = toAddFinal.length; _j < _len; _j++) {
          item = toAddFinal[_j];
          this.check(item);
          item.prependTo(this.node);
          this._attach(item);
        }
      } else {
        achor = this[index - 1];
        for (_k = 0, _len1 = toAddFinal.length; _k < _len1; _k++) {
          item = toAddFinal[_k];
          this.check(item);
          item.after(achor);
          this._attach(item);
        }
      }
      increase = toAddFinal.length - count;
      if (increase < 0) {
        for (origin = _l = _ref = index + count, _ref1 = this._length; _ref <= _ref1 ? _l < _ref1 : _l > _ref1; origin = _ref <= _ref1 ? ++_l : --_l) {
          this[origin + increase] = this[origin];
        }
      } else if (increase > 0) {
        for (origin = _m = _ref2 = this._length - 1, _ref3 = index + count - 1; _ref2 <= _ref3 ? _m < _ref3 : _m > _ref3; origin = _ref2 <= _ref3 ? ++_m : --_m) {
          this[origin + increase] = this[origin];
        }
      }
      for (offset = _n = 0, _len2 = toAddFinal.length; _n < _len2; offset = ++_n) {
        item = toAddFinal[offset];
        this[index + offset] = item;
      }
      this._length += increase;
      for (_o = 0, _len3 = toRemoves.length; _o < _len3; _o++) {
        item = toRemoves[_o];
        this._detach(item);
      }
      return result;
    };

    List.prototype.slice = function(from, to) {
      return this.toArray().slice(from, to);
    };

    List.prototype.forEach = function(handler) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        _results.push(handler(item));
      }
      return _results;
    };

    List.prototype.toArray = function() {
      var item;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          item = this[_i];
          _results.push(item);
        }
        return _results;
      }).call(this);
    };

    List.prototype._attach = function(item) {
      item.parentList = this;
      item.listenBy(this, "destroy", (function(_this) {
        return function() {
          return _this.removeItem(item);
        };
      })(this));
      return this.emit("child/add", item);
    };

    List.prototype._detach = function(item) {
      var node;
      item.parentList = null;
      node = item.node;
      if (node && node.parentElement === this.node) {
        this.node.removeChild(node);
      }
      item.stopListenBy(this);
      return this.emit("child/remove", item);
    };

    List.prototype.sort = function(judge) {
      return this.sync(this.toArray().sort(judge));
    };

    List.prototype.destroy = function() {
      this.length = 0;
      return List.__super__.destroy.call(this);
    };

    return List;

  })(Widget);

  Widget.List = List;

  Widget.makeList = (function(_this) {
    return function(node, create) {
      return new Widget.List(node, create);
    };
  })(this);

  Leaf.Widget = Widget;

}).call(this);
