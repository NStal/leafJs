// Generated by CoffeeScript 1.7.1
(function() {
  var Leaf, exports,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (!exports) {
    exports = window;
  }

  exports.Leaf = {};

  (function(Leaf) {
    var EventEmitter, Key, KeyEventManager, Mouse, Util;
    EventEmitter = (function() {
      function EventEmitter() {
        this.events = {};
        this.trigger = this.emit;
        this.bind = this.on;
      }

      EventEmitter.prototype.on = function(event, callback, context) {
        var handler, handlers;
        handlers = this.events[event] = this.events[event] || [];
        handler = {
          callback: callback,
          option: {
            context: context
          }
        };
        handlers.push(handler);
        return this;
      };

      EventEmitter.prototype.removeListener = function(event, listener) {
        var handler, handlers, index, _i, _len;
        handlers = this.events[event];
        if (!handlers) {
          return false;
        }
        for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
          handler = handlers[index];
          if (handler.callback === listener) {
            handlers[index] = null;
          }
        }
        this.events[event] = handlers.filter(function(item) {
          return item;
        });
        return this;
      };

      EventEmitter.prototype.removeAllListeners = function(event) {
        if (event) {
          this.events[event] = [];
        } else {
          this.events = {};
        }
        return this;
      };

      EventEmitter.prototype.emit = function() {
        var event, handler, handlers, index, once, params, _i, _len;
        event = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        handlers = this.events[event];
        if (handlers) {
          once = false;
          for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
            handler = handlers[index];
            handler.callback.apply(handler.option && handler.option.context || this, params);
            if (handler.option.once) {
              once = true;
            }
          }
          if (once) {
            this.events[event] = handlers.filter(function(item) {
              return item.option.once !== true;
            });
          }
        }
        return this;
      };

      EventEmitter.prototype.once = function(event, callback, context) {
        var handler, handlers;
        handlers = this.events[event] = this.events[event] || [];
        handler = {
          callback: callback,
          option: {
            context: context,
            once: true
          }
        };
        handlers.push(handler);
        return this;
      };

      return EventEmitter;

    })();
    Util = {};
    Util.isHTMLElement = function(template) {
      if (typeof HTMLElement === "object" && template instanceof HTMLElement || (template && typeof template === "object" && template.nodeType === 1 && typeof template.nodeName === "string")) {
        return true;
      }
      return false;
    };
    Util.isHTMLNode = function(o) {
      return (typeof Node === "object" && o instanceof Node) || o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
    };
    Util.isMobile = function() {
      if (navigator && navigator.userAgent) {
        return (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) && true;
      } else {
        return false;
      }
    };
    Util.getBrowserInfo = function() {
      var M, N, tem, ua;
      N = navigator.appName;
      ua = navigator.userAgent;
      M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
      tem = ua.match(/version\/([\.\d]+)/i);
      if (M && tem !== null) {
        M[2] = tem[1];
      }
      M = M ? [M[1],M[2]] : [N, navigator.appVersion, '-?'];
      return {
        name: M[0],
        version: M[1]
      };
    };
    Util.browser = Util.getBrowserInfo();
    Util.capitalize = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };
    KeyEventManager = (function(_super) {
      __extends(KeyEventManager, _super);

      function KeyEventManager(node) {
        KeyEventManager.__super__.constructor.call(this);
        KeyEventManager.instances.push(this);
        this.isActive = false;
        if (node) {
          this.attachTo(node);
        }
      }

      KeyEventManager.prototype.attachTo = function(node) {
        this.attachment = node;
        $(this.attachment).keydown((function(_this) {
          return function(e) {
            e.capture = function() {
              this.catchEvent = false;
              this.preventDefault();
              return this.stopImmediatePropagation();
            };
            if (_this.isActive && KeyEventManager.isActive) {
              _this.emit("keydown", e);
              return e.catchEvent;
            }
            return e.catchEvent;
          };
        })(this));
        return $(this.attachment).keyup((function(_this) {
          return function(e) {
            e.capture = function() {
              this.catchEvent = false;
              this.preventDefault();
              return this.stopImmediatePropagation();
            };
            if (_this.isActive && KeyEventManager.isActive) {
              _this.emit("keyup", e);
              return e.catchEvent;
            }
            return e.catchEvent;
          };
        })(this));
      };

      KeyEventManager.prototype.active = function() {
        return this.isActive = true;
      };

      KeyEventManager.prototype.deactive = function() {
        return this.isActive = false;
      };

      KeyEventManager.prototype.master = function() {
        if (KeyEventManager.current === this) {
          console.error("already mastered");
          console.trace();
          return;
        }
        this.active();
        if (KeyEventManager.current) {
          KeyEventManager.current.deactive();
          KeyEventManager.stack.push(KeyEventManager.current);
        }
        return KeyEventManager.current = this;
      };

      KeyEventManager.prototype.unmaster = function() {
        var prev;
        if (KeyEventManager.current !== this) {
          console.error("current input are not in master");
          console.trace();
          return;
        }
        this.deactive();
        prev = null;
        if (KeyEventManager.stack.length > 0) {
          prev = KeyEventManager.stack.pop();
          prev.active();
        }
        return KeyEventManager.current = prev;
      };

      return KeyEventManager;

    })(EventEmitter);
    Util.clone = function(x) {
      var item, obj, prop, r, _i, _len;
      if (x === null || x === void 0) {
        return x;
      }
      if (typeof x.clone === "function") {
        return x.clone();
      }
      if (x.constructor === Array) {
        r = [];
        for (_i = 0, _len = x.length; _i < _len; _i++) {
          item = x[_i];
          r.push(Util.clone(item));
        }
        return r;
      }
      if (typeof x === "Object") {
        obj = {};
        for (prop in x) {
          obj[prop] = Util.clone(x[prop]);
          return obj;
        }
      }
      return x;
    };
    Util.compare = function(x, y) {
      var index, item, p, _i, _j, _len, _len1;
      if (x === y) {
        return true;
      }
      if (x instanceof Array && y instanceof Array) {
        if (x.length !== y.length) {
          return false;
        }
        for (index = _i = 0, _len = x.length; _i < _len; index = ++_i) {
          item = x[index];
          if (!Util.compare(item, y[index])) {
            return false;
          }
        }
        return true;
      }
      for (p in y) {
        if (typeof x[p] === 'undefined') {
          return false;
        }
      }
      for (p in y) {
        if (y[p]) {
          switch (typeof y[p]) {
            case 'object':
              if (!Util.compare(y[p], x[p])) {
                return false;
              }
              break;
            case 'function':
              if (typeof x[p] === 'undefined' || (p !== 'equals' && y[p].toString() !== x[p].toString())) {
                return false;
              }
              break;
            default:
              if (y[p] !== x[p]) {
                return false;
              }
          }
        } else if (x[p]) {
          return false;
        }
      }
      for (_j = 0, _len1 = x.length; _j < _len1; _j++) {
        p = x[_j];
        if (typeof y[p] === 'undefined') {
          return false;
        }
      }
      return true;
    };
    KeyEventManager.instances = [];
    KeyEventManager.stack = [];
    KeyEventManager.disable = function() {
      return this.isActive = true;
    };
    KeyEventManager.enable = function() {
      return this.isActive = false;
    };
    KeyEventManager.isActive = true;
    Key = {};
    Key["0"] = 48;
    Key["1"] = 49;
    Key["2"] = 50;
    Key["3"] = 51;
    Key["4"] = 52;
    Key["5"] = 53;
    Key["6"] = 54;
    Key["7"] = 55;
    Key["8"] = 56;
    Key["9"] = 57;
    if (Util.browser) {
      if (Util.browser.name === "firefox") {
        Key.cmd = 224;
      } else if (Util.browser.name === "opera") {
        Key.cmd = 17;
      } else {
        Key.cmd = 91;
      }
    }
    Key.a = 65;
    Key.b = 66;
    Key.c = 67;
    Key.d = 68;
    Key.e = 69;
    Key.f = 70;
    Key.g = 71;
    Key.h = 72;
    Key.i = 73;
    Key.j = 74;
    Key.k = 75;
    Key.l = 76;
    Key.m = 77;
    Key.n = 78;
    Key.o = 79;
    Key.p = 80;
    Key.q = 81;
    Key.r = 82;
    Key.s = 83;
    Key.t = 84;
    Key.u = 85;
    Key.v = 86;
    Key.w = 87;
    Key.x = 88;
    Key.y = 89;
    Key.z = 90;
    Key.space = 32;
    Key.shift = 16;
    Key.ctrl = 17;
    Key.alt = 18;
    Key.left = 37;
    Key.up = 38;
    Key.right = 39;
    Key.down = 40;
    Key.enter = 13;
    Key.backspace = 8;
    Key.escape = 27;
    Key.del = Key["delete"] = 46;
    Key.esc = 27;
    Key.pageup = 33;
    Key.pagedown = 34;
    Key.tab = 9;
    Mouse = {};
    Mouse.left = 0;
    Mouse.middle = 1;
    Mouse.right = 2;
    Util.Key = Key;
    Leaf.Util = Util;
    Leaf.Key = Key;
    Leaf.Mouse = Mouse;
    Leaf.EventEmitter = EventEmitter;
    return Leaf.KeyEventManager = KeyEventManager;
  })(this.Leaf);

  (function(Leaf) {
    var List, Util, Widget;
    Util = Leaf.Util;
    Widget = (function(_super) {
      __extends(Widget, _super);

      function Widget(template) {
        this.template = template;
        Widget.__super__.constructor.call(this);
        this.node = null;
        this.$node = null;
        this.node$ = null;
        this.nodes = [];
        this.UI = {};
        Widget.instances.push(this);
        if (!template) {
          return;
        }
        this.initTemplate(this.template);
      }

      Widget.prototype.initTemplate = function(template, option) {
        var node, tempNode, _i, _len, _ref;
        if (!template) {
          throw "invalid template " + template;
        }
        this.nodes = [];
        if (typeof template === "string") {
          if ((template.indexOf("#")) === 0) {
            this.node = document.getElementById(template.substring(1));
            if (!this.node) {
              console.error("template of id", template.substring(1), "not found");
              return;
            }
            this.nodes = [this.node];
            this.node.widget = this;
          } else {
            tempNode = document.createElement("div");
            tempNode.innerHTML = template.trim();
            this.node = tempNode.children[0];
            _ref = tempNode.children;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              node = _ref[_i];
              this.nodes.push(node);
              node.widget = this;
            }
          }
        } else if (Util.isHTMLNode(template)) {
          this.node = template;
          this.node.widget = this;
          this.nodes.push(template);
        }
        if (!this.node) {
          throw "invalid template " + template;
        }
        if (typeof $ === "function") {
          this.$node = $(this.node);
          this.node$ = this.$node;
        }
        this.initUI();
        this.initData();
        this.initSubWidgets();
        return Widget.emit("widget", this);
      };

      Widget.prototype.initData = function() {
        var name, _results;
        if (!this.Data) {
          this.Data = {};
        }
        _results = [];
        for (name in this.Data) {
          if (!this.UI[name]) {
            console.debug("useless widget data " + name);
            continue;
          }
          _results.push((function(_this) {
            return function() {
              var value;
              value = _this.Data[name];
              Object.defineProperty(_this.Data, name, {
                set: function(newValue) {
                  _this._asignValueToDom(name, newValue);
                  return value = newValue;
                },
                get: function() {
                  return value;
                }
              });
              if (value) {
                return _this.Data[name] = value;
              } else {
                return _this.Data[name] = _this.UI[name].innerText;
              }
            };
          })(this)());
        }
        return _results;
      };

      Widget.prototype._asignValueToDom = function(name, value) {
        var dom;
        if (!this.UI[name]) {
          throw "invalid UI '" + name + "'";
        }
        dom = this.UI[name];
        if (typeof value === "string" in value instanceof String) {
          this.UI[name].innerText = value;
        }
      };

      Widget.prototype.initSubWidgets = function() {
        var index, item, name, node, widget, widgets, _i, _j, _len, _len1, _ref, _results, _widgets;
        _ref = this.nodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          widgets = node.getElementsByTagName("widget");
          _widgets = [];
          for (_j = 0, _len1 = widgets.length; _j < _len1; _j++) {
            item = widgets[_j];
            _widgets.push(item);
          }
          widgets = _widgets;
          _results.push((function() {
            var _k, _len2, _results1;
            _results1 = [];
            for (index = _k = 0, _len2 = widgets.length; _k < _len2; index = ++_k) {
              widget = widgets[index];
              name = widget.getAttribute("data-widget");
              if (!name) {
                continue;
              }
              if (this[name] instanceof Widget) {
                _results1.push(this[name].replace(widget));
              } else if (this[name]) {
                console.error("Widget named " + name + " isnt isn't instanceof Widget");
                _results1.push(console.trace());
              } else {
                console.error("Widget named", name, "not exists for", widget);
                _results1.push(console.trace());
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Widget.prototype.initUI = function() {
        var elem, elems, id, node, subNode, _elems, _i, _j, _k, _len, _len1, _len2, _ref;
        if (!this.nodes) {
          throw "invalid root " + this.nodes;
        }
        _ref = this.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          elems = node.getElementsByTagName("*");
          _elems = [node];
          for (_j = 0, _len1 = elems.length; _j < _len1; _j++) {
            elem = elems[_j];
            _elems.push(elem);
          }
          elems = _elems;
          for (_k = 0, _len2 = elems.length; _k < _len2; _k++) {
            subNode = elems[_k];
            if (subNode.tagName.toLowerCase() === "widget") {
              continue;
            }
            if (id = subNode.getAttribute("data-id")) {
              this.UI[id] = subNode;
              subNode.widget = this;
              this._delegateEventForControl(id);
              if (typeof $ === "function") {
                this.UI[id + "$"] = this.UI["$" + id] = $(subNode);
              }
            }
          }
        }
        this._delegateEventForControl();
        return true;
      };

      Widget.prototype._delegateEventForControl = function(id) {
        var event, events, node, _i, _len, _results;
        events = ["blur", "click", "focus", "keydown", "keyup", "keypress", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "scroll"];
        node = this.UI[id];
        if (!node) {
          node = this.node;
          id = "node";
        }
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          event = events[_i];
          _results.push(((function(_this) {
            return function(event) {
              return node["on" + event] = function(e) {
                if (typeof _this["on" + Util.capitalize(event) + Util.capitalize(id)] === "function") {
                  return _this["on" + Util.capitalize(event) + Util.capitalize(id)](e);
                }
                return true;
              };
            };
          })(this))(event));
        }
        return _results;
      };

      Widget.prototype.appendTo = function(target) {
        var node, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (Util.isHTMLElement(target)) {
          _ref = this.nodes;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            target.appendChild(node);
          }
          return true;
        }
        if (target instanceof Leaf.Widget) {
          _ref1 = this.nodes;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            _results.push(target.node.appendChild(node));
          }
          return _results;
        }
      };

      Widget.prototype.replace = function(target) {
        this.before(target);
        if (target instanceof Leaf.Widget) {
          target.remove();
          return;
        }
        if (Util.isHTMLElement(target) && target.parentElement) {
          target.parentElement.removeChild(target);
        }
      };

      Widget.prototype.prependTo = function(target) {
        var first, node, _i, _j, _len, _len1, _ref, _ref1;
        if (Util.isHTMLElement(target)) {
          target = target;
        } else if (target instanceof Leaf.Widget) {
          target = target.node;
        } else {
          return false;
        }
        if (target.children.length === 0) {
          _ref = this.nodes;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            target.appendChild(node);
          }
        } else {
          this.nodes.reverse();
          first = target.children[0];
          _ref1 = this.nodes;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            target.insertBefore(node, first);
          }
          this.nodes.reverse();
        }
        return true;
      };

      Widget.prototype.remove = function() {
        var node, _i, _len, _ref, _results;
        _ref = this.nodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node.parentElement) {
            _results.push(node.parentElement.removeChild(node));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Widget.prototype.after = function(target) {
        var node, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        if (Util.isHTMLElement(target)) {
          target = target;
        } else if (target instanceof Leaf.Widget) {
          target = target.node;
        } else {
          console.error("Insert unknow Object", target);
          return false;
        }
        if (!target || !target.parentElement) {
          console.log(target, target.parentElement);
          console.error("can't insert befere root element ");
          return false;
        }
        if (target.nextElementSibling) {
          _ref = this.nodes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            _results.push(target.parentElement.insertBefore(node, target.nextElementSibling));
          }
          return _results;
        } else {
          _ref1 = this.nodes;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            _results1.push(target.parentElement.appendChild(node));
          }
          return _results1;
        }
      };

      Widget.prototype.before = function(target) {
        var node, _i, _len, _ref;
        if (Util.isHTMLElement(target)) {
          target = target;
        } else if (target instanceof Leaf.Widget) {
          target = target.node;
        } else {
          console.error("Insert unknow Object,target");
          return false;
        }
        if (!target || !target.parentElement) {
          console.error("can't insert befere root element ");
          return false;
        }
        _ref = this.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          target.parentElement.insertBefore(node, target);
        }
        this.nodes.reverse();
        return true;
      };

      Widget.prototype.occupy = function(target) {
        if (Util.isHTMLElement(target)) {
          target.innerHTML = "";
        }
        if (target instanceof Leaf.Widget) {
          target.node.innerHTML = "";
        }
        return this.appendTo(target);
      };

      Widget.prototype.destroy = function() {
        this.UI = null;
        this.node = null;
        return this.removeAllListeners();
      };

      return Widget;

    })(Leaf.EventEmitter);
    List = (function(_super) {
      __extends(List, _super);

      function List(template, create) {
        List.__super__.constructor.call(this, template);
        this.init(create);
        Object.defineProperty(this, "length", {
          get: (function(_this) {
            return function() {
              return _this._length;
            };
          })(this),
          set: (function(_this) {
            return function(value) {
              var index, item, toRemove, _i, _j, _len, _ref, _results;
              toRemove = [];
              if (value > _this._length) {
                throw "can't asign length larger than the origin";
              }
              if (value < 0) {
                throw "can't asign length lesser than 0";
              }
              if (typeof value !== "number") {
                throw new TypeError();
              }
              for (index = _i = value, _ref = _this.length; value <= _ref ? _i < _ref : _i > _ref; index = value <= _ref ? ++_i : --_i) {
                toRemove.push(_this[index]);
                delete _this[index];
              }
              _this._length = value;
              _results = [];
              for (_j = 0, _len = toRemove.length; _j < _len; _j++) {
                item = toRemove[_j];
                _results.push(_this._detach(item));
              }
              return _results;
            };
          })(this)
        });
      }

      List.prototype.init = function(create) {
        this.create = create || this.create || (function(_this) {
          return function(item) {
            return item;
          };
        })(this);
        this._length = 0;
        return this.node.innerHTML = "";
      };

      List.prototype.check = function(item) {
        var child, _i, _len, _results;
        if (!(item instanceof Widget)) {
          throw "Leaf List only accept widget as element";
        }
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          child = this[_i];
          if (child === item) {
            throw "already exists";
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      List.prototype.indexOf = function(item) {
        var child, index, _i, _len;
        for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
          child = this[index];
          if (item === child) {
            return index;
          }
        }
        return -1;
      };

      List.prototype.push = function(item) {
        item = this.create(item);
        this.check(item);
        this[this._length] = item;
        this._length++;
        item.appendTo(this.node);
        item.parentList = this;
        return this._attach(item);
      };

      List.prototype.pop = function() {
        var item;
        if (this._length === 0) {
          return null;
        }
        this._length -= 1;
        item = this[this._length];
        delete this[this._length];
        this._detach(item);
        return item;
      };

      List.prototype.unshift = function(item) {
        var index, _i, _ref;
        item = this.create(item);
        this.check(item);
        if (this._length === 0) {
          item.appendTo(this.node);
          this[0] = item;
          this._length = 1;
          this._attach(item);
          return;
        }
        for (index = _i = _ref = this._length; _ref <= 1 ? _i <= 1 : _i >= 1; index = _ref <= 1 ? ++_i : --_i) {
          this[index] = this[index - 1];
        }
        this[0] = item;
        this._length += 1;
        item.prependTo(this.node);
        this._attach(item);
        return this._length;
      };

      List.prototype.removeItem = function(item) {
        var index;
        index = this.indexOf(item);
        if (index < 0) {
          return index;
        }
        this.splice(index, 1);
        return item;
      };

      List.prototype.shift = function() {
        var index, result, _i, _ref;
        result = this[0];
        for (index = _i = 0, _ref = this._length - 1; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
          this[index] = this[index + 1];
        }
        this._length -= 1;
        this._detach(result);
        return result;
      };

      List.prototype.splice = function() {
        var achor, count, increase, index, item, offset, origin, result, toAdd, toAddFinal, toRemoves, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _o, _ref, _ref1, _ref2, _ref3;
        index = arguments[0], count = arguments[1], toAdd = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        result = [];
        toRemoves = [];
        if (typeof count === "undefined" || index + count > this._length) {
          count = this._length - index;
        }
        for (offset = _i = 0; 0 <= count ? _i < count : _i > count; offset = 0 <= count ? ++_i : --_i) {
          item = this[index + offset];
          toRemoves.push(item);
          result.push(item);
        }
        toAddFinal = (function() {
          var _j, _len, _results;
          _results = [];
          for (_j = 0, _len = toAdd.length; _j < _len; _j++) {
            item = toAdd[_j];
            _results.push(this.create(item));
          }
          return _results;
        }).call(this);
        if (index === 0) {
          for (_j = 0, _len = toAddFinal.length; _j < _len; _j++) {
            item = toAddFinal[_j];
            this.check(item);
            item.prependTo(this.node);
            this._attach(item);
          }
        } else {
          achor = this[index - 1];
          for (_k = 0, _len1 = toAddFinal.length; _k < _len1; _k++) {
            item = toAddFinal[_k];
            this.check(item);
            item.after(achor);
            this._attach(item);
          }
        }
        increase = toAddFinal.length - count;
        if (increase < 0) {
          for (origin = _l = _ref = index + count, _ref1 = this._length; _ref <= _ref1 ? _l < _ref1 : _l > _ref1; origin = _ref <= _ref1 ? ++_l : --_l) {
            this[origin + increase] = this[origin];
          }
        } else if (increase > 0) {
          for (origin = _m = _ref2 = this._length - 1, _ref3 = index + count - 1; _ref2 <= _ref3 ? _m < _ref3 : _m > _ref3; origin = _ref2 <= _ref3 ? ++_m : --_m) {
            this[origin + increase] = this[origin];
          }
        }
        for (offset = _n = 0, _len2 = toAddFinal.length; _n < _len2; offset = ++_n) {
          item = toAddFinal[offset];
          this[index + offset] = item;
        }
        this._length += increase;
        for (_o = 0, _len3 = toRemoves.length; _o < _len3; _o++) {
          item = toRemoves[_o];
          this._detach(item);
        }
        return result;
      };

      List.prototype.slice = function(from, to) {
        return this.toArray().slice(from, to);
      };

      List.prototype.forEach = function(handler) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          item = this[_i];
          _results.push(handler(item));
        }
        return _results;
      };

      List.prototype.toArray = function() {
        var item;
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            item = this[_i];
            _results.push(item);
          }
          return _results;
        }).call(this);
      };

      List.prototype.syncWith = function(arr, converter) {
        var finalArr, index, item, _, _i, _j, _k, _len, _len1, _ref;
        if (converter == null) {
          converter = function(item) {
            return item;
          };
        }
        finalArr = [];
        for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
          item = arr[index];
          _ = converter(item);
          if (!(_ instanceof Widget)) {
            throw "sync of invalid widget at index:" + index;
          }
          finalArr.push(_);
        }
        for (index = _j = 0, _ref = this._length; 0 <= _ref ? _j < _ref : _j > _ref; index = 0 <= _ref ? ++_j : --_j) {
          this._detach(this[index]);
          delete this[index];
        }
        this.node.innerHTML = "";
        for (index = _k = 0, _len1 = finalArr.length; _k < _len1; index = ++_k) {
          item = finalArr[index];
          this[index] = item;
          item.appendTo(this.node);
          this._attach(item);
        }
        this._length = finalArr.length;
        return this;
      };

      List.prototype._attach = function(item) {
        item.parentList = this;
        return this.emit("child/add", item);
      };

      List.prototype._detach = function(item) {
        item.parentList = null;
        item.remove();
        return this.emit("child/remove", item);
      };

      List.prototype.sort = function(judge) {
        return this.sync(this.toArray().sort(judge));
      };

      return List;

    })(Widget);
    Widget.List = List;
    Widget.makeList = (function(_this) {
      return function(node, create) {
        return new Widget.List(node, create);
      };
    })(this);
    Widget.Event = new Leaf.EventEmitter();
    Widget.on = function() {
      return this.Event.on.apply(this.Event, arguments);
    };
    Widget.emit = function() {
      return this.Event.emit.apply(this.Event, arguments);
    };
    Widget.instances = [];
    return Leaf.Widget = Widget;
  })(this.Leaf);

  (function(Leaf) {
    var TemplateManager;
    TemplateManager = (function(_super) {
      __extends(TemplateManager, _super);

      function TemplateManager() {
        TemplateManager.__super__.constructor.call(this);
        this.tids = [];
        this.baseUrl = "template/";
        this.templates = {};
        this.suffix = ".html";
        this.timeout = 10000;
      }

      TemplateManager.prototype.use = function() {
        var tids;
        tids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.tids.push.apply(this.tids, tids);
      };

      TemplateManager.prototype.start = function() {
        return setTimeout(this._start.bind(this), 0);
      };

      TemplateManager.prototype._start = function() {
        var all, remain, remainTemplates, tid, _i, _j, _len, _len1, _ref;
        all = this._fromDomAll();
        _ref = this.tids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tid = _ref[_i];
          this.templates[tid] = all[tid];
        }
        if (this._isRequirementComplete()) {
          this._ready();
          return this;
        }
        remain = this._getNotCompleteRequirements();
        remainTemplates = this._fromDomForEach(remain);
        for (_j = 0, _len1 = remain.length; _j < _len1; _j++) {
          tid = remain[_j];
          this.templates[tid] = remainTemplates[tid];
        }
        if (this._isRequirementComplete()) {
          this._ready();
          return this;
        }
        remain = this._getNotCompleteRequirements();
        return this._fromXHRForEach(remain, (function(_this) {
          return function(err, tid, template) {
            if (err != null) {
              _this.emit("error", err);
              return;
            }
            _this.templates[tid] = template;
            if (_this._isRequirementComplete()) {
              return _this._ready();
            }
          };
        })(this));
      };

      TemplateManager.prototype._ready = function() {
        return this.emit("ready", this.templates);
      };

      TemplateManager.prototype._getNotCompleteRequirements = function() {
        var tid, _i, _len, _ref, _results;
        _ref = this.tids;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tid = _ref[_i];
          if (!this.templates[tid]) {
            _results.push(tid);
          }
        }
        return _results;
      };

      TemplateManager.prototype._isRequirementComplete = function() {
        var tid, _i, _len, _ref;
        _ref = this.tids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tid = _ref[_i];
          if (!this.templates[tid]) {
            return false;
          }
        }
        return true;
      };

      TemplateManager.prototype._fromDomAll = function() {
        var e;
        try {
          return JSON.parse(document.getElementById("leaf-templates").innerHTML);
        } catch (_error) {
          e = _error;
          return {};
        }
      };

      TemplateManager.prototype._fromDomForEach = function(tids) {
        var templateNode, templates, tid, _i, _len;
        templates = {};
        for (_i = 0, _len = tids.length; _i < _len; _i++) {
          tid = tids[_i];
          templateNode = document.getElementById("leaf-templates-" + tid);
          templates[tid] = templateNode ? templateNode.innerHTML : void 0;
        }
        return templates;
      };

      TemplateManager.prototype._fromXHRForEach = function(tids, callback) {
        var targetURI, tid, _fn, _i, _len;
        _fn = (function(_this) {
          return function() {
            var XHR;
            XHR = new XMLHttpRequest();
            XHR.open("GET", targetURI, true);
            XHR.send(null);
            XHR.tid = tid;
            XHR.terminator = setTimeout(function() {
              callback("timeout", XHR.tid, null);
              XHR.done = true;
              return XHR.abort();
            }, _this.timeout);
            return XHR.onreadystatechange = function() {
              var _ref;
              if (this.done) {
                return;
              }
              if (this.readyState === 4) {
                this.done = true;
                if ((_ref = this.status) === 200 || _ref === 302 || _ref === 304) {
                  return callback(null, this.tid, this.responseText);
                } else {
                  return callback(this.status, this.tid, null);
                }
              }
            };
          };
        })(this);
        for (_i = 0, _len = tids.length; _i < _len; _i++) {
          tid = tids[_i];
          if (tid.indexOf(".") >= 1) {
            targetURI = this.baseUrl + tid;
          } else {
            targetURI = this.baseUrl + tid + this.suffix;
          }
          _fn();
        }
        return null;
      };

      return TemplateManager;

    })(Leaf.EventEmitter);
    return Leaf.TemplateManager = TemplateManager;
  })(this.Leaf);

  (function(Leaf) {
    var ApiManager;
    ApiManager = (function(_super) {
      __extends(ApiManager, _super);

      function ApiManager(apis) {
        this.apis = {};
        this.path = "api/";
        this.suffix = "";
        this.defaultMethod = "GET";
        this.acceptStatus = [200];
      }

      ApiManager.prototype.declare = function() {
        var apis;
        apis = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (apis.length === 1 && typeof apis[0] === "string") {
          this.initApiByText(apis[0]);
        }
        return this;
      };

      ApiManager.prototype.initApiByText = function(apiDeclare) {
        var component;
        component = this._extractApiComponent(apiDeclare);
        return this[component.name] = this._createApiByComponent(component);
      };

      ApiManager.prototype._createApiByComponent = function(component) {
        return (function(_this) {
          return function() {
            var body, callback, hasValue, holderIndex, i, index, lastIndex, params, placeHolder, placeHoldersValue, promise, url, xhr, _i, _index, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
            params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            params = params.map(function(value) {
              if (typeof value === "string") {
                return encodeURIComponent(value);
              }
              return value;
            });
            placeHoldersValue = [];
            if (params.length === component.placeHolders.length && (((_ref = typeof params[0]) === "undefined" || _ref === "number" || _ref === "string") || params[0] instanceof String)) {
              placeHoldersValue = params;
            } else if (params.length === 1) {
              hasValue = false;
              _ref1 = component.placeHolders;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                placeHolder = _ref1[_i];
                if (typeof params[0][placeHolder] !== "undefined") {
                  hasValue = true;
                  placeHoldersValue.push(params[0][placeHolder].toString());
                } else {
                  placeHoldersValue.push("");
                }
              }
              if (!hasValue) {
                throw "invalid Parameter Object sent:" + JSON.stringify(params[0]);
              }
            } else if (params.length === 0) {
              _ref2 = component.placeHolders;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                placeHolder = _ref2[_j];
                placeHoldersValue.push("");
              }
            } else {
              throw "invalid parameters " + params;
            }
            url = component.url;
            body = component.body;
            lastIndex = 0;
            while (true) {
              index = -1;
              holderIndex = -1;
              _ref3 = component.placeHolders;
              for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
                placeHolder = _ref3[i];
                _index = url.indexOf("{" + placeHolder + "}", lastIndex);
                if (_index < index && _index >= 0) {
                  index = _index;
                  holderIndex = i;
                } else if (_index < 0 && index < 0) {
                  index = -1;
                } else if (_index < 0 && index >= 0) {
                  index = index;
                } else if (_index >= 0 && index < 0) {
                  index = _index;
                  holderIndex = i;
                }
              }
              if (index < 0) {
                break;
              }
              url = url.substring(0, index) + placeHoldersValue[holderIndex] + url.substring(index + 2 + component.placeHolders[holderIndex].length);
              lastIndex = index + placeHoldersValue[holderIndex].length;
            }
            lastIndex = 0;
            while (true) {
              index = -1;
              holderIndex = -1;
              _ref4 = component.placeHolders;
              for (i = _l = 0, _len3 = _ref4.length; _l < _len3; i = ++_l) {
                placeHolder = _ref4[i];
                _index = body.indexOf("{" + placeHolder + "}", lastIndex);
                if (_index < index && _index >= 0) {
                  index = _index;
                  holderIndex = i;
                } else if (_index < 0 && index < 0) {
                  index = -1;
                } else if (_index < 0 && index >= 0) {
                  index = index;
                } else if (_index >= 0 && index < 0) {
                  index = _index;
                  holderIndex = i;
                }
              }
              if (index < 0) {
                break;
              }
              body = body.substring(0, index) + placeHoldersValue[holderIndex] + body.substring(index + 2 + component.placeHolders[holderIndex].length);
              lastIndex = index + placeHoldersValue[holderIndex].length;
            }
            lastIndex = 0;
            callback = null;
            xhr = new XMLHttpRequest;
            promise = {
              success: function(callback) {
                console.assert(typeof callback === "function");
                this._success = callback;
                return this;
              },
              fail: function(callback) {
                console.assert(typeof callback === "function");
                this._fail = callback;
                return this;
              },
              response: function(callback) {
                console.assert(typeof callback === "function");
                this._response = callback;
                return this;
              },
              timeout: function(count) {
                console.assert(typeof count === "number");
                this._timeout = count;
                return this;
              }
            };
            xhr.onreadystatechange = function(state) {
              var e, json, _ref5;
              if (xhr.readyState === 4) {
                if (_ref5 = xhr.status, __indexOf.call(_this.acceptStatus, _ref5) < 0) {
                  if (promise._fail) {
                    promise._fail({
                      code: xhr.status
                    }, null);
                  }
                  if (promise._response) {
                    promise._response({
                      error: "Invalid Http Code",
                      code: xhr.status
                    }, null);
                  }
                  return;
                }
                if (xhr.getResponseHeader("content-type") === "text/json") {
                  try {
                    json = JSON.parse(xhr.responseText);
                  } catch (_error) {
                    e = _error;
                    if (promise._fail) {
                      promise._fail("Broken Json", {
                        responseText: xhr.responseText
                      });
                    }
                    if (promise._response) {
                      promise._response(null, {
                        error: "Broken Json",
                        responseText: xhr.responseText
                      });
                    }
                  }
                  json.responseText = xhr.responseText;
                  if (json.state) {
                    if (promise._success) {
                      promise._success(json.data);
                    }
                  } else {
                    if (promise._fail) {
                      promise._fail(json.error || "Unknown Error", json);
                    }
                  }
                  if (promise._response) {
                    return promise._response(null, json);
                  }
                } else {
                  return callback(null, xhr.responseText);
                }
              }
            };
            xhr.open(component.method, url, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(body);
            return promise;
          };
        })(this);
      };

      ApiManager.prototype._extractApiComponent = function(apiDeclare) {
        var body, bodyMatch, e, flag, flagPos, i, length, method, methodMatch, name, placeHolder, placeHolders, regBody, regMethod, regName, regUrl, string, url, urlMatch, _i, _j, _len, _ref;
        regName = /^\w*/i;
        regUrl = /@[\w:?&=\-+\.\/{}]+/i;
        regMethod = /#[a-z]+/i;
        regBody = /\$[\w:?&=\-+\.\/{}]+/i;
        try {
          name = regName.exec(apiDeclare)[0];
        } catch (_error) {
          e = _error;
          throw "Invalid API name";
        }
        urlMatch = regUrl.exec(apiDeclare);
        url = urlMatch ? urlMatch[0].substring(1) : this.path + name + this.suffix;
        methodMatch = regMethod.exec(apiDeclare);
        method = methodMatch ? methodMatch[0].substring(1) : this.defaultMethod;
        bodyMatch = regBody.exec(apiDeclare);
        body = bodyMatch ? bodyMatch[0].substring(1) : "";
        placeHolders = [];
        _ref = [url, body];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          string = _ref[_i];
          flag = false;
          flagPos = 0;
          length = string.length;
          for (i = _j = 0; 0 <= length ? _j <= length : _j >= length; i = 0 <= length ? ++_j : --_j) {
            if (string[i] === "{") {
              if (flag === true) {
                throw "invalid {} pair " + apiDeclare;
              }
              flag = true;
              flagPos = i;
            }
            if (string[i] === "}") {
              if (flag === false) {
                throw "invalid {} pair " + apiDeclare;
              }
              flag = false;
              placeHolder = string.substring(flagPos + 1, i);
              if (__indexOf.call(placeHolders, placeHolder) < 0) {
                placeHolders.push(placeHolder);
              }
            }
          }
          if (flag === true) {
            throw "invalid {} pair " + apiDeclare;
          }
        }
        return {
          name: name,
          url: url,
          method: method,
          body: body,
          placeHolders: placeHolders
        };
      };

      return ApiManager;

    })(Leaf.EventEmitter);
    return Leaf.ApiManager = ApiManager;
  })(this.Leaf);

  Leaf = window.Leaf;

  (function(Leaf) {
    var Api, ApiContext, ApiFactory, Request;
    ApiFactory = (function(_super) {
      __extends(ApiFactory, _super);

      function ApiFactory(apis) {
        this.apis = {};
        this.path = "api/";
        this.suffix = "";
        this.defaultMethod = "GET";
        this.acceptStatus = [200];
        this.infos = [];
      }

      ApiFactory.prototype.declare = function(name, params, option) {
        var info, method, url;
        if (option == null) {
          option = {};
        }
        console.assert(typeof name === "string");
        url = option.url || ("" + this.path + name + this.suffix);
        method = option.method || this.defaultMethod;
        params = params instanceof Array && params || [];
        info = {
          name: name,
          url: url,
          method: method,
          params: params
        };
        this.infos.push(info);
        return this;
      };

      ApiFactory.prototype.build = function() {
        var api, info, _i, _len, _ref;
        api = {};
        _ref = this.infos;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          info = _ref[_i];
          api[info.name] = new Api(info).toFunction();
        }
        return api;
      };

      return ApiFactory;

    })(Leaf.EventEmitter);
    Api = (function() {
      function Api(info) {
        this.info = info;
        this.declares = this.buildDeclares();
        this.method = this.info.method.toUpperCase();
        this.name = this.info.name;
        this.url = this.info.url;
      }

      Api.prototype.buildDeclares = function() {
        var declare, declares, param, paramInfo, paramName, shouldBe, _i, _len, _ref;
        declares = [];
        _ref = this.info.params;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          paramInfo = param.split(":").filter(function(value) {
            return value;
          });
          paramName = paramInfo[0];
          shouldBe = paramInfo[1] || "string";
          declare = {
            name: paramName,
            optional: false
          };
          if (shouldBe.lastIndexOf("?") === (shouldBe.length - 1)) {
            declare.optional = true;
          }
          shouldBe = shouldBe.replace(/\?/g, "");
          if (shouldBe === "string") {
            declare.format = "string";
          } else if (shouldBe === "number") {
            declare.format = "number";
          } else if (shouldBe.length === 0) {
            declare.format = "string";
          } else {
            throw new Error("Unknow Format Declaration In API " + this.info.name + ":" + shouldBe);
          }
          declares.push(declare);
        }
        return declares;
      };

      Api.prototype.checkParam = function(value, declare) {
        var number;
        if (typeof value !== "number" && !value) {
          if (declare.optional) {
            return "";
          } else {
            throw new Error("API:" + this.info.name + "'s parameter:" + declare.name + " is required but given:" + value);
          }
        }
        if (typeof value === "number" && isNaN(value)) {
          throw new Error("API " + this.info.name + " parameter:" + declare.name + " recieve an NaN");
        }
        if (typeof value === declare.format) {
          return value;
        }
        if (typeof value === "number" && declare.format === "string") {
          console.warn("change param" + declare.name + " of API " + this.info.name + " from number to string");
          return value.toString();
        }
        if (typeof value === "string" && declare === "number") {
          number = parseFloat(value);
          if (isNaN(number)) {
            throw new Error("API " + this.info.name + " parameter:" + declare.name + " require an number but given an string");
          } else {
            console.warn("change param" + declare.name + " of API " + this.info.name + " from string to number");
            return value;
          }
        }
      };

      Api.prototype.checkParams = function(params) {
        var declare, index, _i, _j, _len, _len1, _ref, _ref1, _result;
        if (params.length === 1 && typeof params[0] === "object") {
          params = params[0];
          _ref = this.declares;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            declare = _ref[_i];
            params[declare.name] = this.checkParam(params[declare.name], declare);
          }
          return params;
        } else {
          _result = {};
          _ref1 = this.declares;
          for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
            declare = _ref1[index];
            _result[declare.name] = this.checkParam(params[index], declare);
          }
          return _result;
        }
      };

      Api.prototype.buildRequest = function(paramsDict) {
        var URI, body, key, query, queryArray, value, _ref;
        queryArray = [];
        for (key in paramsDict) {
          value = encodeURIComponent(paramsDict[key]);
          queryArray.push([key, value].join("="));
        }
        query = queryArray.join("&");
        URI = "";
        body = "";
        if ((_ref = this.method) === "GET" || _ref === "DELETE" || _ref === "PUT") {
          URI = "" + this.url + "?" + query;
        } else if (this.method === "POST") {
          URI = this.url;
          body = query;
        } else {
          console.warn("Unknow Method " + this.method + ",build as if it is GET");
        }
        return {
          URI: URI,
          body: body,
          context: new ApiContext(),
          method: this.method
        };
      };

      Api.prototype.invoke = function() {
        var params, requestInfo;
        params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        params = this.checkParams(params);
        requestInfo = this.buildRequest(params);
        return new Request(requestInfo).context;
      };

      Api.prototype.toFunction = function() {
        return this.invoke.bind(this);
      };

      return Api;

    })();
    Request = (function(_super) {
      __extends(Request, _super);

      function Request(info) {
        var xhr;
        this.URI = info.URI;
        this.body = info.body;
        this.method = info.method;
        this.context = info.context;
        this.acceptStatus = [200, 302];
        this.xhr = new XMLHttpRequest();
        xhr = this.xhr;
        xhr.open(this.method, this.URI, true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.send(this.body);
        xhr.onreadystatechange = (function(_this) {
          return function(state) {
            var json, _ref;
            if (xhr.readyState !== 4) {
              return;
            }
            if (_ref = xhr.status, __indexOf.call(_this.acceptStatus, _ref) < 0) {
              _this.context._fail("Http Error", _this.createStatus());
              return;
            }
            if (xhr.getResponseHeader("content-type") === "text/json" || ApiFactory.forceJson) {
              json = _this.json();
              if (json) {
                if (json.state === true) {
                  _this.context._success(json.data);
                } else if (json.state === false) {
                  _this.context._fail(json.error, _this.createStatus());
                }
                return _this.context._response(json);
              } else {
                return _this.context._fail("Json Parse Error", _this.createStatus());
              }
            } else {
              _this.context._response(_this.text());
              return true;
            }
          };
        })(this);
      }

      Request.prototype.text = function() {
        return this.xhr.responseText;
      };

      Request.prototype.json = function() {
        var e, json;
        try {
          json = JSON.parse(this.xhr.responseText);
        } catch (_error) {
          e = _error;
          return null;
        }
        return json;
      };

      Request.prototype.createStatus = function() {
        return {
          httpCode: this.xhr.status,
          text: this.text(),
          json: this.json()
        };
      };

      return Request;

    })(Leaf.EventEmitter);
    ApiContext = (function() {
      function ApiContext() {
        this._response = function() {};
        this._fail = function() {};
        this._success = function() {};
        this._time = -1;
      }

      ApiContext.prototype.response = function(callback) {
        console.assert(typeof callback === "function");
        this._response = callback;
        return this;
      };

      ApiContext.prototype.fail = function(callback) {
        console.assert(typeof callback === "function");
        this._fail = callback;
        return this;
      };

      ApiContext.prototype.success = function(callback) {
        console.assert(typeof callback === "function");
        this._success = callback;
        return this;
      };

      ApiContext.prototype.timeout = function(time) {
        console.assert(typeof time === "number");
        this._time = time;
        return this;
      };

      return ApiContext;

    })();
    ApiFactory.forceJson = true;
    return Leaf.ApiFactory = ApiFactory;
  })(Leaf);

  (function(Leaf) {
    var Route, Router;
    Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        this.routes = [];
      }

      Router.prototype.add = function(path, callback) {
        if (typeof path !== "string" || typeof callback !== "function") {
          throw new Error("Route.add need path:string and callback:function as parameter");
        }
        return this.routes.push(new Route(path, callback));
      };

      Router.prototype.route = function(url) {
        var info, route, _i, _len, _ref, _results;
        _ref = this.routes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          route = _ref[_i];
          info = route.match(url);
          if (info) {
            _results.push(route.callback(info));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Router.prototype.monitorHash = function() {
        return window.onhashchange = (function(_this) {
          return function() {
            return _this.applyRouteByHash();
          };
        })(this);
      };

      Router.prototype.applyRouteByHash = function() {
        return this.route(window.location.hash.replace("#", ""));
      };

      return Router;

    })(Leaf.EventEmitter);
    Route = (function(_super) {
      __extends(Route, _super);

      function Route(path, callback) {
        console.assert(typeof path === "string");
        console.assert(typeof callback === "function");
        this.path = path;
        this.callback = callback;
        this.sensitive = false;
        this.strict = false;
        this.parser = this.getParser(path);
      }

      Route.prototype.match = function(url) {
        var index, key, matches, params, _i, _len, _ref;
        matches = this.parser.regexp.exec(url);
        if (!matches) {
          return null;
        }
        params = {};
        _ref = this.parser.keys;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          key = _ref[index];
          params[key] = matches[index + 1];
        }
        return {
          url: url,
          params: params
        };
      };

      Route.prototype.getParser = function(path) {
        var keyParser, keys, pathReg, pathRegStr, sensitive, strict;
        strict = this.strict;
        sensitive = this.sensitive;
        keyParser = /(\/)?:(\w+)/g;
        keys = [];
        pathRegStr = path.concat(strict && "" || "/?");
        pathRegStr = pathRegStr.replace(keyParser, function(_, slash, key) {
          keys.push(key);
          slash = slash || "";
          return "(?:{slash})([^/]+)".replace("{slash}", slash);
        });
        pathRegStr = pathRegStr.replace(/[\/.*]/g, "\\$&");
        pathReg = new RegExp("^" + pathRegStr + "$", sensitive && "" || "i");
        return {
          regexp: pathReg,
          keys: keys
        };
      };

      return Route;

    })(Leaf.EventEmitter);
    return Leaf.Router = Router;
  })(this.Leaf);

}).call(this);
