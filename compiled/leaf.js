// Generated by CoffeeScript 1.10.0
(function() {
  var BackgroundAPIBuilder, BufferObject, Collection, DummyModel, ErrorDoc, Errors, EventEmitter, ForegroundModel, IPCConnection, IPCDataDenormalizable, IPCDataNormalizable, Key, KeyEventManager, Leaf, List, MessageCenter, Model, ModelProvidable, ModelReceivable, Mouse, Namespace, ProviderLayer, ProviderModelManager, Publishable, ReadableStream, ReadyAware, ReceiverLayer, RestApiFactory, SharedCallbacks, States, Subscribable, TemplateManager, Trait, Util, Widget, WidgetBase, WritableStream, exports, i, index,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Leaf = {};

  if (typeof module === "undefined" || module === null) {
    exports = Leaf;
    window.Leaf = Leaf;
  } else {
    module.exports = Leaf;
    exports = Leaf;
  }

  Trait = (function() {
    function Trait() {
      var blacklist, params, prop, target;
      target = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (target == null) {
        target = {};
      }
      blacklist = ["constructor", "initialize"];
      for (prop in this) {
        if ((this.__proto__.hasOwnProperty(prop) || this.hasOwnProperty(prop)) && indexOf.call(blacklist, prop) < 0) {
          if (typeof target[prop] !== "undefined") {
            throw new Error("Conflict Trait property for " + target.constructor.name + "." + prop);
          } else {
            if (typeof this[prop] === "function") {
              target[prop] = this[prop];
            } else {
              target[prop] = Util.clone(this[prop]);
            }
          }
        }
      }
      if (this.initialize) {
        this.initialize.apply(target, params);
      }
      return target;
    }

    return Trait;

  })();

  Leaf.Trait = Trait;

  EventEmitter = (function() {
    EventEmitter.mixin = function(obj) {
      var em, prop;
      em = new EventEmitter();
      for (prop in em) {
        obj[prop] = em[prop];
      }
      return obj;
    };

    function EventEmitter() {
      if (this._events == null) {
        this._events = {};
      }
      if (this._bubbles == null) {
        this._bubbles = [];
      }
      this.maxListener = 16;
    }

    EventEmitter.prototype.warnLeak = function() {
      return console.error("Over MaxListener " + this.maxListener + ", may be a potential memory leak.");
    };

    EventEmitter.prototype._ensureEventPool = function() {
      if (this._events == null) {
        this._events = {};
      }
      return this._bubbles != null ? this._bubbles : this._bubbles = [];
    };

    EventEmitter.prototype.addListener = function(event, callback, context) {
      var handler, handlers;
      this._ensureEventPool();
      handlers = this._events[event] = this._events[event] || [];
      handler = {
        callback: callback,
        context: context
      };
      handlers.push(handler);
      if (handlers.length > this.maxListener) {
        this.warnLeak();
      }
      return this;
    };

    EventEmitter.prototype.on = function() {
      return this.addListener.apply(this, arguments);
    };

    EventEmitter.prototype.removeListener = function(event, listener) {
      var handler, handlers, i, index, len;
      this._ensureEventPool();
      handlers = this._events[event];
      if (!listener) {
        return;
      }
      if (!handlers) {
        return this;
      }
      for (index = i = 0, len = handlers.length; i < len; index = ++i) {
        handler = handlers[index];
        if (handler.callback === listener) {
          handlers[index] = null;
        }
      }
      this._events[event] = handlers.filter(function(item) {
        return item;
      });
      return this;
    };

    EventEmitter.prototype.removeAllListeners = function(event) {
      this._ensureEventPool();
      if (event) {
        this._events[event] = [];
      } else {
        this._events = {};
      }
      return this;
    };

    EventEmitter.prototype.emit = function() {
      var event, handler, handlers, i, index, j, len, len1, once, params, todos;
      event = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      handlers = this._events[event];
      todos = [];
      if (handlers) {
        once = false;
        for (index = i = 0, len = handlers.length; i < len; index = ++i) {
          handler = handlers[index];
          todos.push(handler);
          if (handler.once) {
            once = true;
          }
        }
        if (once) {
          this._events[event] = handlers.filter(function(item) {
            return item.once !== true;
          });
        }
      }
      for (j = 0, len1 = todos.length; j < len1; j++) {
        handler = todos[j];
        handler.callback.apply(handler.context || this, params);
      }
      return this;
    };

    EventEmitter.prototype.once = function(event, callback, context) {
      var handler, handlers;
      this._ensureEventPool();
      handlers = this._events[event] = this._events[event] || [];
      handler = {
        callback: callback,
        context: context,
        once: true
      };
      handlers.push(handler);
      if (handlers.length > this.maxListener) {
        this.warnLeak();
      }
      return this;
    };

    EventEmitter.prototype.bubble = function(emitter, event, processor) {
      var listener;
      this._ensureEventPool();
      listener = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (processor) {
            args = processor.apply(_this, args);
          } else {
            args.unshift(event);
          }
          return _this.emit.apply(_this, args);
        };
      })(this);
      emitter.on(event, listener);
      return this._bubbles.push({
        emitter: emitter,
        event: event,
        listener: listener
      });
    };

    EventEmitter.prototype.stopBubble = function(emitter, event) {
      this._ensureEventPool();
      this._bubbles = this._bubbles.filter(function(item) {
        if (item.emitter === emitter) {
          if (!event || item.event === event) {
            item.emitter.removeListener(item.event, item.listener);
            return false;
          }
        }
        return true;
      });
      return this;
    };

    EventEmitter.prototype.stopAllBubbles = function() {
      var i, item, len, ref;
      this._ensureEventPool();
      ref = this._bubbles;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        item.emitter.removeListener(item.event, item.listener);
      }
      this._bubbles.length = 0;
      return this;
    };

    EventEmitter.prototype.listenBy = function(who, event, callback, context) {
      var handler, handlers;
      this._ensureEventPool();
      this._events[event] = this._events[event] || [];
      handlers = this._events[event];
      handler = {
        callback: callback,
        context: context || who,
        owner: who
      };
      handlers.push(handler);
      if (handlers.length > this.maxListener) {
        this.warnLeak();
      }
      return this;
    };

    EventEmitter.prototype.listenByOnce = function(who, event, callback, context) {
      var handler, handlers;
      this._ensureEventPool();
      this._events[event] = this._events[event] || [];
      handlers = this._events[event];
      handler = {
        callback: callback,
        context: context || who,
        owner: who,
        once: true
      };
      handlers.push(handler);
      if (handlers.length > this.maxListener) {
        this.warnLeak();
      }
      return this;
    };

    EventEmitter.prototype.stopListenBy = function(who) {
      var event, handler, handlers, i, index, len;
      this._ensureEventPool();
      for (event in this._events) {
        handlers = this._events[event];
        if (!handlers) {
          continue;
        }
        for (index = i = 0, len = handlers.length; i < len; index = ++i) {
          handler = handlers[index];
          if (handler.owner && handler.owner === who) {
            handlers[index] = null;
          }
        }
        this._events[event] = handlers.filter(function(item) {
          return item;
        });
      }
      return this;
    };

    return EventEmitter;

  })();

  exports.EventEmitter = EventEmitter;

  Util = {};

  Util.isHTMLElement = function(template) {
    if (typeof HTMLElement === "object" && template instanceof HTMLElement || (template && typeof template === "object" && template.nodeType === 1 && typeof template.nodeName === "string")) {
      return true;
    }
    return false;
  };

  Util.isHTMLNode = function(o) {
    return (typeof Node === "object" && o instanceof Node) || o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
  };

  Util.isMobile = function() {
    if (navigator && navigator.userAgent) {
      return (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) && true;
    } else {
      return false;
    }
  };

  Util.getBrowserInfo = function() {
    var M, N, tem, ua;
    N = navigator.appName;
    ua = navigator.userAgent;
    M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
    tem = ua.match(/version\/([\.\d]+)/i);
    if (M && tem !== null) {
      M[2] = tem[1];
    }
    M = M ? [M[1],M[2]] : [N, navigator.appVersion, '-?'];
    return {
      name: M[0],
      version: M[1],
      mobile: Util.isMobile()
    };
  };

  Util.browser = Util.getBrowserInfo();

  Util.capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  Util.slugToCamel = function(string) {
    return string.replace(/-[a-z]/ig, function(match) {
      return match.substring(1).toUpperCase();
    });
  };

  Util.camelToSlug = function(string, keepCase) {
    var result;
    if (keepCase == null) {
      keepCase = false;
    }
    result = string.replace(/[a-z][A-Z]/g, function(match) {
      return match[0] + "-" + match[1].toLowerCase();
    });
    if (!keepCase) {
      result = result.toLowerCase();
    }
    return result;
  };

  Util.clone = function(x, stack) {
    var i, item, len, obj, prop, r;
    if (stack == null) {
      stack = [];
    }
    if (x === null || x === void 0) {
      return x;
    }
    if (typeof x.clone === "function") {
      return x.clone();
    }
    if (indexOf.call(stack, x) >= 0) {
      throw new Error("clone recursive object");
    }
    if (x instanceof Array) {
      r = [];
      stack.push(x);
      for (i = 0, len = x.length; i < len; i++) {
        item = x[i];
        r.push(Util.clone(item, stack));
      }
      return r;
    }
    if (typeof x === "object") {
      obj = {};
      stack.push(x);
      for (prop in x) {
        if (x.hasOwnProperty(prop)) {
          obj[prop] = Util.clone(x[prop], stack);
        }
      }
      return obj;
    }
    return x;
  };

  Util.compare = function(x, y) {
    var i, index, item, len, p;
    if (x === y) {
      return true;
    }
    if ((x && !y) || (y && !x)) {
      return false;
    }
    if (x instanceof Array && y instanceof Array) {
      if (x.length !== y.length) {
        return false;
      }
      for (index = i = 0, len = x.length; i < len; index = ++i) {
        item = x[index];
        if (!Util.compare(item, y[index])) {
          return false;
        }
      }
      return true;
    }
    for (p in y) {
      if (!y.hasOwnProperty(p)) {
        continue;
      }
      if (y[p]) {
        switch (typeof y[p]) {
          case 'object':
            if (!Util.compare(y[p], x[p])) {
              return false;
            }
            break;
          case 'function':
            if (typeof x[p] === 'undefined' || (p !== 'equals' && y[p].toString() !== x[p].toString())) {
              return false;
            }
            break;
          default:
            if (y[p] !== x[p]) {
              return false;
            }
        }
      } else if (x[p]) {
        return false;
      }
    }
    for (p in x) {
      if (!x.hasOwnProperty(p)) {
        continue;
      }
      if (typeof y[p] === 'undefined' && y[p] !== x[p]) {
        return false;
      }
    }
    return true;
  };

  SharedCallbacks = {};

  SharedCallbacks.create = (function(_this) {
    return function() {
      var fn;
      fn = function() {
        var args, callback, cbs, i, len, results1;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        cbs = fn.callbacks.slice(0);
        fn.callbacks.length = 0;
        results1 = [];
        for (i = 0, len = cbs.length; i < len; i++) {
          callback = cbs[i];
          results1.push(callback.apply(null, args));
        }
        return results1;
      };
      fn.callbacks = [];
      fn.__defineGetter__("length", function() {
        return fn.callbacks.length;
      });
      fn.__defineGetter__("count", function() {
        return fn.callbacks.length;
      });
      fn.push = function(callback) {
        return this.callbacks.push(callback);
      };
      fn.clear = function() {
        return fn.callbacks.length = 0;
      };
      return fn;
    };
  })(this);

  Leaf.SharedCallbacks = SharedCallbacks;

  Leaf.Util = Util;

  Leaf.EventEmitter = EventEmitter;

  Util.createError = function() {
    var BaseError, CustomError, args, meta, name;
    name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    args = args.filter(function(item) {
      return item;
    });
    meta = {};
    BaseError = Error;
    if (args[0] && args[0].prototype && Error.prototype.isPrototypeOf(args[0].prototype)) {
      BaseError = args[0];
      if (typeof args[1] === "object") {
        meta = args[1];
      }
    } else if (args[0] && typeof args[0] === "object") {
      meta = args[0];
    }
    CustomError = (function(superClass) {
      extend(CustomError, superClass);

      CustomError.name = name;

      function CustomError(message, props) {
        var prop;
        if (props == null) {
          props = {};
        }
        CustomError.__super__.constructor.call(this, message);
        this.name = name;
        this.message = message || meta.message || props.message || name;
        for (prop in meta) {
          if (meta.hasOwnProperty(prop)) {
            this[prop] = meta[prop];
          }
        }
        for (prop in props) {
          if (props.hasOwnProperty(prop)) {
            this[prop] = props[prop];
          }
        }
      }

      CustomError.prototype.name = name;

      return CustomError;

    })(BaseError);
    return CustomError;
  };

  ErrorDoc = (function() {
    function ErrorDoc() {
      this.errors = {};
    }

    ErrorDoc.prototype.define = function(name, base, meta) {
      if (typeof base === "string") {
        if (!this.errors[base]) {
          throw new Error("base error " + base + " not found");
        } else {
          base = this.errors[base];
        }
      }
      this.errors[name] = Util.createError(name, base, meta);
      return this;
    };

    ErrorDoc.prototype.generate = function() {
      return this.errors;
    };

    ErrorDoc.create = function() {
      return new ErrorDoc();
    };

    return ErrorDoc;

  })();

  Leaf.ErrorDoc = ErrorDoc;

  if (typeof Leaf !== "undefined") {
    EventEmitter = Leaf.EventEmitter;
    Errors = Leaf.ErrorDoc.create().define("AlreadyDestroyed").define("InvalidState").generate();
  } else {
    EventEmitter = (require("eventex")).EventEmitter;
    Errors = (require("error-doc")).create().define("AlreadyDestroyed").define("InvalidState").generate();
  }

  States = (function(superClass) {
    extend(States, superClass);

    States.Errors = Errors;

    function States() {
      this._try = bind(this._try, this);
      this.state = "void";
      this._sole = 1;
      this.lastException = null;
      this.states = {};
      this.rescues = [];
      this.data = {};
      if (this.forceAsync == null) {
        this.forceAsync = false;
      }
      if (this._isDebugging) {
        this.debug();
      }
      States.__super__.constructor.call(this);
    }

    States.prototype.declare = function() {
      var i, len, results1, state, states;
      states = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (i = 0, len = states.length; i < len; i++) {
        state = states[i];
        results1.push(this.states[state] = state);
      }
      return results1;
    };

    States.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      this.emit("destroy");
      this.isDestroyed = true;
      this.emit = function() {};
      this.on = function() {};
      this.once = function() {};
      return this.removeAllListeners();
    };

    States.prototype.extract = function() {
      var data, fields, i, item, len;
      fields = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      data = {};
      for (i = 0, len = fields.length; i < len; i++) {
        item = fields[i];
        data[item] = this.data[item];
      }
      return data;
    };

    States.prototype.setData = function(data) {
      var prop, results1;
      results1 = [];
      for (prop in data) {
        if (data.hasOwnProperty(prop)) {
          results1.push(this.data[prop] = data[prop]);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    States.prototype.at = function(state, callback) {
      var handlerName;
      handlerName = "at" + state[0].toUpperCase() + state.substring(1);
      this[handlerName] = callback;
      return this;
    };

    States.prototype._nextTick = function(exec) {
      var fn;
      if (typeof setImmediate !== "undefined") {
        fn = setImmediate;
      } else {
        fn = (function(_this) {
          return function(exec) {
            var timer;
            timer = setTimeout(function() {
              return exec();
            }, 4);
            return timer;
          };
        })(this);
      }
      return fn(exec);
    };

    States.prototype._clearTick = function(timer) {
      var fn;
      if (typeof setImmediate !== "undefined") {
        return fn = clearImmediate;
      } else {
        return fn = clearTimeout;
      }
    };

    States.prototype.setState = function() {
      var args, state;
      state = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this._clearTick(this._stateTimer);
      if (this.forceAsync) {
        return this._stateTimer = this._nextTick((function(_this) {
          return function() {
            if (_this._isDebugging) {
              return _this._setState.apply(_this, [state].concat(slice.call(args)));
            } else {
              return _this._try(function() {
                return _this._setState.apply(_this, [state].concat(slice.call(args)));
              });
            }
          };
        })(this));
      } else {
        if (this._isDebugging) {
          return this._setState.apply(this, [state].concat(slice.call(args)));
        } else {
          return this._try((function(_this) {
            return function() {
              return _this._setState.apply(_this, [state].concat(slice.call(args)));
            };
          })(this));
        }
      }
    };

    States.prototype._try = function(fn) {
      var e, error1;
      try {
        return fn();
      } catch (error1) {
        e = error1;
        return this.error(e);
      }
    };

    States.prototype._setState = function() {
      var args, item, prop, ref, sole, state, stateHandler;
      state = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this._clearTick(this._stateTimer);
      if (!state) {
        throw new Errors.InvalidState("Can't set invalid states " + state);
      }
      if (this.state === "panic" && state !== "void") {
        return;
      }
      if (this.isDestroyed) {
        return;
      }
      if (this.data.feeds) {
        ref = this.data.feeds;
        for (prop in ref) {
          item = ref[prop];
          item.feedListener = null;
        }
      }
      this._sole += 1;
      this.stopWaiting();
      this.previousState = this.state;
      this.state = state;
      if (this._isDebugging && this._debugStateHandler) {
        this._debugStateHandler();
      }
      this.emit.apply(this, ["state", state].concat(slice.call(args)));
      this.emit.apply(this, ["state/" + state].concat(slice.call(args)));
      stateHandler = "at" + state[0].toUpperCase() + state.substring(1);
      if (this[stateHandler]) {
        sole = this._sole;
        return this[stateHandler].apply(this, [(function(_this) {
          return function() {
            return sole !== _this._sole;
          };
        })(this)].concat(slice.call(args)));
      } else if (state !== "void") {
        if (console.warn) {
          return console.warn("state handler " + stateHandler + " not provided");
        } else {
          return console.error("state handler " + stateHandler + " not provided");
        }
      }
    };

    States.prototype.error = function(error) {
      var i, len, ref, rescue;
      this.panicError = error;
      this.panicState = this.state;
      ref = this.rescues;
      for (i = 0, len = ref.length; i < len; i++) {
        rescue = ref[i];
        if (rescue.state === this.panicState && (this.panicError instanceof rescue.error || !rescue.error)) {
          if (this._debugRescueHandler) {
            this._debugRescueHandler();
          }
          this.recover();
          rescue.callback(error);
          break;
        }
      }
      if (this.panicError) {
        return this.setState("panic");
      }
    };

    States.prototype.recover = function(recoverState) {
      var error, state;
      error = this.panicError;
      state = this.panicState;
      this.respawn();
      if (recoverState) {
        this.setState(recoverState);
      }
      return {
        error: error,
        state: state
      };
    };

    States.prototype.rescue = function(state, error, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (!callback) {
        throw new Error("rescue should provide callbacks");
      }
      return this.rescues.push({
        state: state,
        error: error,
        callback: callback
      });
    };

    States.prototype.give = function() {
      var handler, items, name;
      name = arguments[0], items = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this._waitingGiveName === name) {
        handler = this._waitingGiveHandler;
        this._waitingGiveName = null;
        this._waitingGiveHandler = null;
        if (this._isDebugging && this._debugRecieveHandler) {
          this._debugRecieveHandler.apply(this, [name].concat(slice.call(items)));
        }
        handler.apply(this, items);
      }
    };

    States.prototype.stopWaiting = function(name) {
      if (name) {
        if (this._waitingGiveName === name) {
          this._waitingGiveName = null;
          return this._waitingGiveHandler = null;
        } else {
          throw new Error("not waiting for " + name);
        }
      } else {
        this._waitingGiveName = null;
        return this._waitingGiveHandler = null;
      }
    };

    States.prototype.isWaitingFor = function(name) {
      if (!name && this._waitingGiveName) {
        return true;
      }
      if (name === this._waitingGiveName) {
        return true;
      }
      return false;
    };

    States.prototype.feed = function(name, item) {
      var base1, base2, listener;
      if ((base1 = this.data).feeds == null) {
        base1.feeds = {};
      }
      if ((base2 = this.data.feeds)[name] == null) {
        base2[name] = [];
      }
      this.data.feeds[name].push(item);
      if (listener = this.data.feeds[name].feedListener) {
        this.data.feeds[name].feedListener = null;
        return listener();
      }
    };

    States.prototype.consumeAll = function(name) {
      var length, ref;
      if (((ref = this.data.feeds) != null ? ref[name] : void 0) != null) {
        length = this.data.feeds[name].length || 0;
        this.data.feeds[name] = [];
        return length;
      }
      return 0;
    };

    States.prototype.hasFeed = function(name) {
      var ref, ref1;
      return ((ref = this.data.feeds) != null ? (ref1 = ref[name]) != null ? ref1.length : void 0 : void 0) > 0;
    };

    States.prototype.consume = function(name) {
      var ref;
      if (!this.hasFeed(name)) {
        return null;
      }
      if (((ref = this.data.feeds) != null ? ref[name] : void 0) != null) {
        return this.data.feeds[name].shift() || true;
      }
    };

    States.prototype.consumeWhenAvailableMergeToLast = function(name, callback) {
      return this.consumeWhenAvailable(name, (function(_this) {
        return function(detail) {
          var last;
          while (last = _this.consume(name)) {
            continue;
          }
          if (last) {
            return callback(last);
          } else {
            return callback(detail);
          }
        };
      })(this));
    };

    States.prototype.consumeWhenAvailable = function(name, callback) {
      var base1, base2;
      if ((base1 = this.data).feeds == null) {
        base1.feeds = {};
      }
      if ((base2 = this.data.feeds)[name] == null) {
        base2[name] = [];
      }
      if (this.data.feeds[name].length > 0) {
        return callback(this.consume(name));
      } else {
        this.data.feeds[name].feedListener = (function(_this) {
          return function() {
            return callback(_this.consume(name));
          };
        })(this);
        this.emit("starve", name);
        return this.emit("starve/" + name);
      }
    };

    States.prototype.waitFor = function(name, handler) {
      if (this._waitingGiveName) {
        throw new Error("already waiting for " + this._waitingGiveName + " and can't wait for " + name + " now");
      }
      this._waitingGiveName = name;
      this._waitingGiveHandler = handler;
      if (this._isDebugging && this._debugWaitHandler) {
        this._debugWaitHandler();
      }
      this.emit("wait", name);
      return this.emit("wait/" + name);
    };

    States.prototype.atPanic = function() {
      if (this._isDebugging && this._debugPanicHandler) {
        this._debugPanicHandler();
      }
      console.error(this.panicError, this.panicState);
      return this.emit("panic", this.panicError, this.panicState);
    };

    States.prototype.reset = function(data) {
      if (data == null) {
        data = {};
      }
      this.data = data;
      this.respawn();
      return this.emit("reset");
    };

    States.prototype.getSole = function() {
      return this._sole;
    };

    States.prototype.checkSole = function(sole) {
      return this._sole === sole;
    };

    States.prototype.stale = function(sole) {
      if (typeof sole === "function") {
        return sole();
      }
      return this._sole !== sole;
    };

    States.prototype.respawn = function() {
      this._sole = this._sole || 1;
      this._sole += 1;
      this._waitingGiveName = null;
      this._waitingGiveHandler = null;
      this.panicError = null;
      this.panicState = null;
      this.setState("void");
      this._clearTick(this._stateTimer);
      return this.clear();
    };

    States.prototype.debug = function(option) {
      var _console, close, log;
      if (option == null) {
        option = {};
      }
      close = option.close;
      this._debugName = option.name || this.constructor && this.constructor.name || "Anonymouse";
      _console = option.console || console;
      log = function() {
        if (_console.debug) {
          return _console.debug.apply(_console, arguments);
        } else {
          return _console.log.apply(_console, arguments);
        }
      };
      if (close) {
        this._isDebugging = false;
      } else {
        this._isDebugging = true;
      }
      if (this._debugStateHandler == null) {
        this._debugStateHandler = (function(_this) {
          return function() {
            return log((_this._debugName || '') + " state: " + _this.state);
          };
        })(this);
      }
      if (this._debugWaitHandler == null) {
        this._debugWaitHandler = (function(_this) {
          return function() {
            return log((_this._debugName || '') + " waiting: " + _this._waitingGiveName);
          };
        })(this);
      }
      if (this._debugRescueHandler == null) {
        this._debugRescueHandler = (function(_this) {
          return function() {
            return log((_this._debugName || '') + " rescue: " + _this.panicState + " => " + _this.panicError);
          };
        })(this);
      }
      if (this._debugPanicHandler == null) {
        this._debugPanicHandler = (function(_this) {
          return function() {
            return log((_this._debugName || '') + " panic: " + (JSON.stringify(_this.panicError)));
          };
        })(this);
      }
      return this._debugRecieveHandler != null ? this._debugRecieveHandler : this._debugRecieveHandler = (function(_this) {
        return function() {
          var data, name;
          name = arguments[0], data = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          return log((_this._debugName || '') + " recieve： " + name + " => " + (data.join(" ")));
        };
      })(this);
    };

    States.prototype.clear = function(handler) {
      var _handler;
      if (handler) {
        if (this._clearHandler) {
          throw new Error("already has clear handler");
        }
        return this._clearHandler = handler;
      } else {
        _handler = this._clearHandler;
        this._clearHandler = null;
        if (_handler) {
          return _handler();
        }
      }
    };

    return States;

  })(EventEmitter);

  if (typeof Leaf !== "undefined") {
    Leaf.States = States;
  } else {
    module.exports = States;
  }

  KeyEventManager = (function(superClass) {
    extend(KeyEventManager, superClass);

    KeyEventManager.stack = [];

    KeyEventManager.instances = [];

    KeyEventManager.disable = function() {
      return this.isActive = true;
    };

    KeyEventManager.enable = function() {
      return this.isActive = false;
    };

    KeyEventManager.isActive = true;

    function KeyEventManager(node) {
      KeyEventManager.__super__.constructor.call(this);
      KeyEventManager.instances.push(this);
      this.isActive = false;
      if (node) {
        this.attachTo(node);
      }
    }

    KeyEventManager.prototype.attachTo = function(node) {
      this.attachment = node;
      $(this.attachment).keydown((function(_this) {
        return function(e) {
          e.capture = function() {
            this.catchEvent = false;
            this.preventDefault();
            return this.stopImmediatePropagation();
          };
          if (_this.isActive && KeyEventManager.isActive) {
            _this.emit("keydown", e);
            return e.catchEvent;
          }
          return e.catchEvent;
        };
      })(this));
      return $(this.attachment).keyup((function(_this) {
        return function(e) {
          e.capture = function() {
            this.catchEvent = false;
            this.preventDefault();
            return this.stopImmediatePropagation();
          };
          if (_this.isActive && KeyEventManager.isActive) {
            _this.emit("keyup", e);
            return e.catchEvent;
          }
          return e.catchEvent;
        };
      })(this));
    };

    KeyEventManager.prototype.active = function() {
      return this.isActive = true;
    };

    KeyEventManager.prototype.deactive = function() {
      return this.isActive = false;
    };

    KeyEventManager.prototype.master = function() {
      if (KeyEventManager.current === this) {
        console.warn("already mastered");
        console.trace();
        return;
      }
      this.active();
      if (KeyEventManager.current) {
        KeyEventManager.current.deactive();
        KeyEventManager.stack.push(KeyEventManager.current);
      }
      return KeyEventManager.current = this;
    };

    KeyEventManager.prototype.unmaster = function() {
      var prev;
      if (KeyEventManager.current !== this) {
        console.warn("current KeyEventManager are not in master");
        console.trace();
        return false;
      }
      this.deactive();
      prev = null;
      if (KeyEventManager.stack.length > 0) {
        prev = KeyEventManager.stack.pop();
        prev.active();
      }
      KeyEventManager.current = prev;
      return true;
    };

    return KeyEventManager;

  })(EventEmitter);

  Key = {};

  Key["0"] = 48;

  Key["1"] = 49;

  Key["2"] = 50;

  Key["3"] = 51;

  Key["4"] = 52;

  Key["5"] = 53;

  Key["6"] = 54;

  Key["7"] = 55;

  Key["8"] = 56;

  Key["9"] = 57;

  if (Util.browser) {
    if (Util.browser.name === "firefox") {
      Key.cmd = 224;
    } else if (Util.browser.name === "opera") {
      Key.cmd = 17;
    } else {
      Key.cmd = 91;
    }
  } else {
    Key.cmd = 91;
  }

  Key.a = 65;

  Key.b = 66;

  Key.c = 67;

  Key.d = 68;

  Key.e = 69;

  Key.f = 70;

  Key.g = 71;

  Key.h = 72;

  Key.i = 73;

  Key.j = 74;

  Key.k = 75;

  Key.l = 76;

  Key.m = 77;

  Key.n = 78;

  Key.o = 79;

  Key.p = 80;

  Key.q = 81;

  Key.r = 82;

  Key.s = 83;

  Key.t = 84;

  Key.u = 85;

  Key.v = 86;

  Key.w = 87;

  Key.x = 88;

  Key.y = 89;

  Key.z = 90;

  Key.space = 32;

  Key.shift = 16;

  Key.ctrl = 17;

  Key.alt = 18;

  Key.left = 37;

  Key.up = 38;

  Key.right = 39;

  Key.down = 40;

  Key.enter = 13;

  Key.backspace = 8;

  Key.escape = 27;

  Key.del = Key["delete"] = 46;

  Key.esc = 27;

  Key.pageup = 33;

  Key.pagedown = 34;

  Key.tab = 9;

  Key.home = 36;

  Key.end = 35;

  Key.quote = 222;

  Key.openBracket = 219;

  Key.closeBracket = 221;

  Key.backSlash = 220;

  Key.slash = 191;

  Key.equal = 187;

  Key.comma = 188;

  Key.period = 190;

  Key.dash = 189;

  Key.semiColon = 186;

  Key.graveAccent = 192;

  Mouse = {};

  Mouse.left = 0;

  Mouse.middle = 1;

  Mouse.right = 2;

  Leaf.KeyEventManager = KeyEventManager;

  Leaf.Key = Key;

  Leaf.Mouse = Mouse;

  for (index = i = 1; i <= 12; index = ++i) {
    Key["f" + index] = 111 + index;
  }

  Model = (function(superClass) {
    extend(Model, superClass);

    function Model(raw) {
      var data, field, j, len, ref;
      if (raw == null) {
        raw = {};
      }
      Model.__super__.constructor.call(this);
      data = {};
      this.__defineGetter__("data", (function(_this) {
        return function() {
          return data;
        };
      })(this));
      this.__defineSetter__("data", (function(_this) {
        return function(obj) {
          return _this.sets(obj);
        };
      })(this));
      this._defines = {};
      this._idprop = null;
      this._silent = false;
      this._ref = 0;
      if (this.fields instanceof Array) {
        ref = this.fields;
        for (j = 0, len = ref.length; j < len; j++) {
          field = ref[j];
          this.declare(field);
        }
      } else if (this.fields && typeof this.fields === "object") {
        for (field in this.fields) {
          this.declare(field);
        }
        this.defaults(this.fields);
      }
      this.data = raw;
    }

    Model.prototype.has = function(name) {
      if (this._defines[name]) {
        return true;
      }
      return false;
    };

    Model.prototype.undeclare = function(name) {
      var item, j, len;
      if (name instanceof Array) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          this.undeclare(item);
        }
        return;
      }
      delete this._defines[name];
      delete this.data[name];
      return delete this[name];
    };

    Model.prototype.declare = function(name) {
      var accessor, item, j, len, obj;
      if (name instanceof Array) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          this.declare(item);
        }
        return;
      }
      if (this._defines[name]) {
        console && console.warn && console.warn("already defines model property " + name);
        return;
      }
      obj = {};
      this._defines[name] = obj;
      accessor = {
        get: (function(_this) {
          return function() {
            return obj.value;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            var change;
            if (obj.value === value) {
              return value;
            }
            obj.value = value;
            if (_this._silent) {
              return value;
            }
            change = {};
            change[name] = value;
            _this.emit("change", change);
            _this.emit("change/" + name, value);
            return value;
          };
        })(this),
        enumerable: true,
        configurable: true
      };
      Object.defineProperty(this.data, name, accessor);
      if (typeof this[name] === "undefined") {
        return Object.defineProperty(this, name, accessor);
      } else {
        return console && console.warn && console.warn("Model property name '" + name + "' conflict with an existing property of this model instance, and won't be overwritten. You can access it safely via Model.data." + name + " instead of model." + name);
      }
    };

    Model.prototype.defaults = function(kv) {
      var prop, results1;
      results1 = [];
      for (prop in kv) {
        if (this.has(prop)) {
          this._defines[prop]["default"] = kv[prop];
          if (typeof this.get(prop) === "undefined") {
            results1.push(this.set(prop, kv[prop]));
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    Model.prototype.reset = function() {
      var prop, results1;
      results1 = [];
      for (prop in this._defines) {
        results1.push(this.data[prop] = this._defines[prop]["default"]);
      }
      return results1;
    };

    Model.prototype.get = function(key, value) {
      var result;
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      result = this.data[key];
      if (typeof result === "undefined") {
        return value;
      } else {
        return result;
      }
    };

    Model.prototype.set = function(key, value) {
      var _silent, change;
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      _silent = this._silent;
      this._silent = true;
      this.data[key] = value;
      this._silent = _silent;
      change = {};
      change[key] = value;
      this.emit("change", change);
      return this.emit("change/" + key, value);
    };

    Model.prototype.sets = function(obj) {
      var _silent, change, changed, prop, value;
      if (!obj) {
        return;
      }
      change = {};
      changed = false;
      for (prop in this._defines) {
        if (typeof obj[prop] !== "undefined") {
          value = obj[prop];
          if (this.get(prop) !== value) {
            changed = true;
            change[prop] = value;
            _silent = this._silent;
            this._silent = true;
            this.data[prop] = value;
            this._silent = _silent;
            this.emit("change/" + prop, value);
          }
        }
      }
      if (changed) {
        return this.emit("change", change);
      }
    };

    Model.prototype.preset = function(key, value) {
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key + " for " + this.constructor.name);
      }
      if (!this._defines[key].unstable) {
        this._defines[key].old = this.data[key];
      }
      this._defines[key].unstable = true;
      return this.data[key] = value;
    };

    Model.prototype.presets = function(obj) {
      var prop, results1;
      results1 = [];
      for (prop in obj) {
        if (this.has(prop)) {
          results1.push(this.preset(prop, obj[prop]));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    Model.prototype.undo = function(key) {
      var prop;
      if (!key) {
        for (prop in this._defines) {
          this.undo(prop);
        }
        return;
      }
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key + " for " + this.constructor.name);
      }
      if (this._defines[key].unstable) {
        this.data[key] = this._defines[key].old;
        this._defines[key].unstable = false;
        return delete this._defines[key].old;
      }
    };

    Model.prototype.confirm = function(key) {
      var prop;
      if (!key) {
        for (prop in this._defines) {
          this.confirm(prop);
        }
        return;
      }
      if (this._defines[key].unstable) {
        delete this._defines[key].old;
        return this._defines[key].unstable = false;
      }
    };

    Model.prototype.toJSON = function(option) {
      var complete, fields, prop, result;
      if (option == null) {
        option = {};
      }
      complete = option.complete;
      fields = option.fields;
      result = {};
      for (prop in this._defines) {
        if (typeof this.data[prop] === "undefined" && !complete) {
          continue;
        }
        if (fields instanceof Array && indexOf.call(fields, prop) < 0) {
          continue;
        }
        result[prop] = this.data[prop];
        if (result[prop] instanceof Array) {
          result[prop] = result[prop].map(function(item) {
            if (item && typeof item.toJSON === "function") {
              return item.toJSON({
                complete: complete
              });
            }
            return item;
          });
        } else if (!result[prop]) {
          continue;
        } else if (typeof result[prop].toJSON === "function") {
          result[prop] = result[prop].toJSON({
            complete: complete
          });
        }
      }
      return result;
    };

    return Model;

  })(EventEmitter);

  Leaf.Model = Model;

  Collection = (function(superClass) {
    extend(Collection, superClass);

    function Collection() {
      Collection.__super__.constructor.call(this);
      this.models = [];
      this.id = null;
      this.__defineGetter__("length", (function(_this) {
        return function() {
          return _this.models.length;
        };
      })(this));
    }

    Collection.prototype.contain = function(model) {
      if (this.get(model)) {
        return true;
      }
      return false;
    };

    Collection.prototype.setId = function(id) {
      if (this.models.length !== 0) {
        throw new Error("set id should before collection has any content");
      }
      return this.id = id;
    };

    Collection.prototype.find = function(obj) {
      if (!obj) {
        return this.models.slice();
      }
      return this.models.filter(function(item) {
        var prop;
        for (prop in obj) {
          if (item.data[prop] !== obj[prop]) {
            return false;
          }
        }
        return true;
      });
    };

    Collection.prototype.findOne = function(obj) {
      var result;
      if (!obj) {
        return this.models[0];
      }
      result = null;
      this.models.some(function(item) {
        var prop;
        for (prop in obj) {
          if (item.data[prop] !== obj[prop]) {
            return false;
          }
        }
        result = item;
        return true;
      });
      return result;
    };

    Collection.prototype.get = function(model) {
      var id, target;
      target = null;
      if (this.id) {
        if (model instanceof Leaf.Model) {
          id = model.get(this.id);
        } else {
          id = model;
        }
      }
      this.models.some((function(_this) {
        return function(old) {
          if (_this.id) {
            if (old.get(_this.id) === id) {
              target = old;
              return true;
            }
            return false;
          } else if (model === old) {
            target = old;
            return true;
          }
          return false;
        };
      })(this));
      if (target) {
        return target;
      }
      return null;
    };

    Collection.prototype.validate = function(model) {
      return true;
    };

    Collection.prototype.add = function(model) {
      var old;
      if (!(model instanceof Leaf.Model)) {
        throw new Error("add invalid model, not instanceof Leaf.Model");
      }
      old = this.get(model);
      if (old) {
        old.sets(model.data);
        return old;
      }
      this.models.push(model);
      this._attachModel(model);
      this.emit("add", model);
      return model;
    };

    Collection.prototype.empty = function() {
      var j, len, model, ref;
      ref = this.models;
      for (j = 0, len = ref.length; j < len; j++) {
        model = ref[j];
        this._detachModel(model);
        this.emit("remove", model);
      }
      return this.models = [];
    };

    Collection.prototype.remove = function(model) {
      var target;
      target = this.get(model);
      if (!target) {
        return false;
      }
      this.models = this.models.filter(function(item) {
        return item !== target;
      });
      this._detachModel(target);
      this.emit("remove", target);
      return true;
    };

    Collection.prototype._attachModel = function(model) {
      return model.listenBy(this, "change", (function(_this) {
        return function(key, value) {
          if (_this.id && key === _this.id) {
            throw new Error("shouldn't change id " + key + " for model inside a the collection");
          }
          _this.emit("change/model", model, key, value);
          return _this.emit("change/model/" + key, model, key, value);
        };
      })(this));
    };

    Collection.prototype._detachModel = function(model) {
      return model.stopListenBy(this);
    };

    return Collection;

  })(EventEmitter);

  Leaf.Collection = Collection;

  Namespace = (function(superClass) {
    extend(Namespace, superClass);

    function Namespace() {
      Namespace.__super__.constructor.call(this);
      this.scope = {};
      this.widgets = [];
    }

    Namespace.prototype.include = function() {
      return this.register.apply(this, arguments);
    };

    Namespace.prototype.register = function(constructor, name) {
      if (!name) {
        name = constructor.name;
      }
      if (!((constructor != null ? constructor.prototype : void 0) instanceof Leaf.Widget) || !name) {
        throw new Error("invalid namespace register with " + name);
      }
      if (indexOf.call(this.widgets, constructor) >= 0) {
        return;
      }
      constructor.scopeName = name;
      this.scope[constructor.scopeName] = constructor;
      this.widgets.push(constructor);
      return this.selectorCache = null;
    };

    Namespace.prototype.getQuerySelector = function() {
      var extra;
      extra = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.selectorCache == null) {
        this.selectorCache = this.widgets.filter(function(item) {
          return item["public"] || true;
        }).map(function(item) {
          return Util.camelToSlug(item.scopeName);
        }).join(",").trim();
      }
      if (this.selectorCache) {
        extra.unshift(this.selectorCache.trim());
      }
      return extra.join(",");
    };

    Namespace.prototype.createWidgetByElement = function(elem, name) {
      var Constructor, attr, j, k, len, len1, param, ref, ref1, widget;
      name = Util.capitalize(Util.slugToCamel(name || elem.tagName.toLowerCase()));
      Constructor = this.scope[name];
      if (!Constructor) {
        return null;
      }
      param = {};
      ref = elem.attributes;
      for (j = 0, len = ref.length; j < len; j++) {
        attr = ref[j];
        if (attr.name.indexOf("data-") !== 0) {
          param[Util.slugToCamel(attr.name)] = attr.value;
        }
      }
      widget = new Constructor(elem, param);
      ref1 = elem.attributes;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        attr = ref1[k];
        if (attr.name === "class" && widget.node.className) {
          widget.node.className += " " + attr.value;
          continue;
        }
        widget.node.setAttribute(attr.name, attr.value);
        widget.node[Leaf.Util.slugToCamel(attr.name)] = attr.value;
      }
      return widget;
    };

    Namespace.prototype.setTemplates = function(templates) {
      return this.templates = templates;
    };

    return Namespace;

  })(Leaf.EventEmitter);

  Leaf.Namespace = Namespace;

  Widget = (function(superClass) {
    extend(Widget, superClass);

    Widget.prototype.widgetEvents = [];

    Widget.prototype._interestingDOMEventNames = ["click", "mouseup", "mousedown", "mousemove", "mouseleave", "mouseenter", "mouseover", "keydown", "keyup", "keypress"];

    function Widget(option) {
      var template;
      if (option == null) {
        option = null;
      }
      Widget.__super__.constructor.call(this);
      this._interestingDOMEventNames = this._interestingDOMEventNames.slice(0);
      this.widgetEvents = this.widgetEvents.slice();
      template = null;
      if (!option) {
        template = null;
      } else if (typeof option === "string") {
        template = option;
      } else if (Util.isHTMLNode(option)) {
        template = option;
      } else if (typeof option === "object") {
        template = option.node || option.template || null;
      }
      this.namespace = this.namespace || (this.constructor && this.constructor.namespace) || new Leaf.Namespace();
      this.template = template || this.template || document.createElement("div");
      this.node = null;
      this.$node = null;
      this.node$ = null;
      this.UI = {};
      this.initTemplate(this.template);
      this._models = [];
    }

    Widget.prototype.include = function(widget, name) {
      var j, len, ref, ref1, results1;
      this.namespace = this.namespace || (this.constructor && this.constructor.namespace) || Widget.ns || new Leaf.Namespace();
      this.namespace.include(widget, name);
      ref1 = (widget != null ? (ref = widget.prototype) != null ? ref.widgetEvents : void 0 : void 0) || [];
      results1 = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        name = ref1[j];
        if (indexOf.call(this._interestingDOMEventNames, name) < 0) {
          results1.push(this._interestingDOMEventNames.push(name));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    Widget.prototype.bubbleDOMEvent = function(name, props) {
      var e, prop, value;
      if (props == null) {
        props = {};
      }
      if (indexOf.call(this.widgetEvents || [], name) < 0) {
        console.error("You should declare CustomDOMEvent \"" + name + "\" in @widgetEvents");
      }
      e = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
      for (prop in props) {
        value = props[prop];
        e[prop] = value;
      }
      this.node.dispatchEvent(e);
      return e;
    };

    Widget.prototype.initTemplate = function(template) {
      var oldNode, query, tempNode;
      if (!template) {
        template = "<div></div>";
      }
      oldNode = this.node;
      if (typeof template === "string") {
        template = template.trim();
        if ((template.indexOf("<")) !== 0) {
          query = template;
          this.node = document.querySelector(query);
          if (!this.node) {
            console.error("template of query " + query + " not found");
            return;
          }
        } else {
          tempNode = document.createElement("div");
          tempNode.innerHTML = template.trim();
          this.node = tempNode.children[0];
          tempNode.removeChild(this.node);
        }
      } else if (Util.isHTMLNode(template)) {
        this.node = template;
      }
      this.node.selfWidget = this;
      if (!this.node) {
        this.isValid = false;
        return;
      }
      if (typeof $ === "function") {
        this.$node = $(this.node);
        this.node$ = this.$node;
      }
      if (oldNode && oldNode.parentElement && oldNode !== this.node) {
        oldNode.parentElement.insertBefore(this.node, oldNode);
        oldNode.parentElement.removeChild(oldNode);
      }
      if (this.node.nodeType === this.node.TEXT_NODE) {
        return;
      }
      this.initSubTemplate();
      this.initUI();
      this.initSubWidgets();
      return this.initDelegates();
    };

    Widget.prototype.initSubTemplate = function() {
      var j, len, name, results1, template, templateNodes, tmpl;
      this.templates = this.templates || {};
      templateNodes = this.node.querySelectorAll("template");
      templateNodes = [].slice.call(templateNodes, 0);
      results1 = [];
      for (j = 0, len = templateNodes.length; j < len; j++) {
        tmpl = templateNodes[j];
        template = tmpl.innerHTML;
        name = tmpl.getAttribute("data-name");
        if (tmpl) {
          tmpl.style.display = "none";
        }
        if (name) {
          results1.push(this.templates[name] = template);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    Widget.prototype.expose = function(name, remoteName) {
      var capName, getterName, setterName;
      remoteName = remoteName || name;
      if (this[name] && typeof this[name] === "function") {
        return this.node.__defineGetter__(remoteName, (function(_this) {
          return function() {
            return _this[name].bind(_this);
          };
        })(this));
      } else {
        capName = Util.capitalize(name);
        getterName = "onGet" + capName;
        setterName = "onSet" + capName;
        this.node.__defineGetter__(remoteName, (function(_this) {
          return function() {
            if (_this[getterName]) {
              return _this[getterName]("property");
            }
            return _this[name];
          };
        })(this));
        return this.node.__defineSetter__(remoteName, (function(_this) {
          return function(value) {
            if (_this[setterName]) {
              return _this[setterName](value, "property");
            } else {
              return _this[name] = value;
            }
          };
        })(this));
      }
    };

    Widget.prototype.initSubWidgets = function() {
      var elem, elems, j, len, results1, selector;
      if (this.namespace) {
        selector = this.namespace.getQuerySelector("widget");
      } else {
        selector = "widget";
      }
      elems = this.node.querySelectorAll(selector);
      elems = [].slice.call(elems, 0);
      results1 = [];
      for (j = 0, len = elems.length; j < len; j++) {
        elem = elems[j];
        if (elem === this.node) {
          continue;
        }
        results1.push(this.initSubWidget(elem));
      }
      return results1;
    };

    Widget.prototype.initSubWidget = function(elem) {
      var attr, item, j, k, len, len1, name, ref, ref1, widget;
      if (typeof elem === "string") {
        elem = this.node.querySelector("[data-widget='" + elem + "']");
      }
      if (!elem) {
        return;
      }
      if (elem.dataset == null) {
        elem.dataset = {};
      }
      name = elem.dataset.widget;
      widget = (this[name] instanceof Widget) && this[name] || this.namespace.createWidgetByElement(elem);
      if (!widget && !this.hasEmbedWidget) {
        console.warn(elem.tagName + " has name " + name + " but no widget nor namespace present for it.");
        return;
      }
      widget.replace(elem);
      if (this[name] === widget) {
        ref = elem.attributes;
        for (j = 0, len = ref.length; j < len; j++) {
          attr = ref[j];
          if (attr.name === "class") {
            ref1 = elem.classList;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              item = ref1[k];
              widget.node.classList.add(item);
            }
          } else {
            widget.node.setAttribute(attr.name, attr.value);
          }
        }
      }
      widget.parentWidget = this;
      if ((name != null) && (this[name] == null)) {
        this[name] = widget;
      }
      if (elem.dataset.id) {
        return this._bindUI(widget.node, elem.dataset.id);
      }
    };

    Widget.prototype.initUI = function() {
      var elems, id, j, len, node, subNode;
      node = this.node;
      elems = node.querySelectorAll("[data-id]");
      elems = [].slice.call(elems);
      elems.unshift(node);
      for (j = 0, len = elems.length; j < len; j++) {
        subNode = elems[j];
        if (id = subNode.getAttribute("data-id")) {
          this._bindUI(subNode, id);
          this._delegateUnBubbleEvent(id);
        }
      }
      this._delegateUnBubbleEvent();
      return true;
    };

    Widget.prototype._bindUI = function(node, id) {
      this.UI[id] = node;
      node.widget = this;
      node.uiId = id;
      if (typeof $ === "function") {
        return this.UI[id + "$"] = this.UI["$" + id] = $(node);
      }
    };

    Widget.prototype._delegateTo = function(type, name, event) {
      var fnName;
      fnName = "on" + (Util.capitalize(event.type)) + (Util.capitalize(name));
      if (type === "group") {
        fnName += "Groups";
      }
      if (this[fnName]) {
        return this[fnName](event);
      }
      return true;
    };

    Widget.prototype.initDelegates = function() {
      var event, events, j, len, results1;
      if (this.disableDelegates) {
        return;
      }
      events = this._interestingDOMEventNames;
      results1 = [];
      for (j = 0, len = events.length; j < len; j++) {
        event = events[j];
        results1.push((function(_this) {
          return function(event) {
            return _this.node.addEventListener(event, function(e) {
              var result, results2, source;
              e.capture = function() {
                e.stopImmediatePropagation();
                return e.preventDefault();
              };
              source = e.target || e.srcElement;
              if (!source) {
                return;
              }
              if (source.dataset == null) {
                source.dataset = {};
              }
              results2 = [];
              while (source && !e.defaultPrevented) {
                e.currentTarget = source;
                if (source === _this.node) {
                  result = _this._delegateTo("self", "node", e);
                }
                if (source.widget && source.widget !== _this) {
                  break;
                } else if (source.uiId) {
                  result = _this._delegateTo("id", source.uiId, e);
                } else if (source.dataset.group) {
                  result = _this._delegateTo("group", source.dataset.group, e);
                }
                if (result === false) {
                  e.capture();
                  break;
                } else {
                  if (source === _this.node) {
                    break;
                  }
                  results2.push(source = source.parentElement);
                }
              }
              return results2;
            });
          };
        })(this)(event));
      }
      return results1;
    };

    Widget.prototype._delegateUnBubbleEvent = function(name) {
      var delegates, event, j, len, node, option, ref, results1;
      if (this.disableDelegates) {
        return;
      }
      if (!name) {
        node = this.node;
        name = "node";
      } else {
        node = this.UI[name];
      }
      if (!node) {
        return;
      }
      delegates = [
        {
          names: ["input", "textarea"],
          events: ["change", "focus", "blur", "scroll"]
        }, {
          names: ["form"],
          events: ["submit"]
        }, {
          events: ["scroll"]
        }
      ];
      results1 = [];
      for (j = 0, len = delegates.length; j < len; j++) {
        option = delegates[j];
        if (option.names && (ref = node.tagName.toLowerCase(), indexOf.call(option.names, ref) < 0)) {
          continue;
        }
        results1.push((function() {
          var k, len1, ref1, results2;
          ref1 = option.events;
          results2 = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            event = ref1[k];
            results2.push((function(_this) {
              return function(event) {
                return node["on" + event] = function(e) {
                  return _this._delegateTo("id", name, e);
                };
              };
            })(this)(event));
          }
          return results2;
        }).call(this));
      }
      return results1;
    };

    Widget.prototype.appendTo = function(target) {
      if (Util.isHTMLNode(target)) {
        target.appendChild(this.node);
        return true;
      }
      if (target instanceof Leaf.Widget) {
        return target.node.appendChild(this.node);
      }
    };

    Widget.prototype.replace = function(target) {
      if (target === this || target === this.node) {
        return;
      }
      this.before(target);
      if (target instanceof Widget) {
        target.remove();
        return;
      }
      if (Util.isHTMLNode(target) && target.parentElement) {
        target.parentElement.removeChild(target);
      }
    };

    Widget.prototype.prependTo = function(target) {
      var first;
      if (Util.isHTMLNode(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        return false;
      }
      if (target.children.length === 0) {
        target.appendChild(this.node);
      } else {
        first = target.children[0];
        target.insertBefore(this.node, first);
      }
      return true;
    };

    Widget.prototype.remove = function() {
      if (this.node.parentElement) {
        return this.node.parentElement.removeChild(this.node);
      }
    };

    Widget.prototype.after = function(target) {
      if (target === this || target === this.node) {
        return;
      }
      if (Util.isHTMLNode(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        console.error("Insert unknow Object", target);
        return false;
      }
      if (!target || !target.parentElement) {
        console.error("can't insert befere root element ");
        return false;
      }
      if (target.nextSibling) {
        return target.parentElement.insertBefore(this.node, target.nextSibling);
      } else {
        return target.parentElement.appendChild(this.node);
      }
    };

    Widget.prototype.before = function(target) {
      if (target === this || target === this.node) {
        return;
      }
      if (Util.isHTMLNode(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        console.error("Insert unknow Object,target");
        return false;
      }
      if (!target || !target.parentElement) {
        console.error("can't insert befere root element ");
        return false;
      }
      target.parentElement.insertBefore(this.node, target);
      return true;
    };

    Widget.prototype.occupy = function(target) {
      if (Util.isHTMLElemen(target)) {
        target.innerHTML = "";
      }
      if (target instanceof Leaf.Widget) {
        target.node.innerHTML = "";
      }
      return this.appendTo(target);
    };

    Widget.prototype.destroy = function() {
      var item, j, len, ref, results1;
      this.emit("beforeDestroy");
      this.isDestroyed = true;
      this.removeAllListeners();
      if (this.node && this.node.querySelectorAll) {
        ref = this.node.querySelectorAll("img") || [];
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          results1.push(item.removeAttribute("src"));
        }
        return results1;
      }
    };

    return Widget;

  })(Leaf.EventEmitter);

  WidgetBase = Widget;

  Widget = (function(superClass) {
    extend(Widget, superClass);

    Widget.namespace = WidgetBase.namespace;

    Widget.attrs = ["text", "html", "class", "value", "attribute", "src", "prop"];

    function Widget(template) {
      this._ViewModel = new Model();
      Widget.__super__.constructor.call(this, template);
      this.__defineGetter__("Data", (function(_this) {
        return function() {
          return _this._ViewModel.data;
        };
      })(this));
      this.__defineGetter__("VM", (function(_this) {
        return function() {
          return _this._ViewModel.data;
        };
      })(this));
      this.__defineSetter__("VM", (function(_this) {
        return function(value) {
          return _this._ViewModel.data = value;
        };
      })(this));
    }

    Widget.prototype.initTemplate = function(template) {
      Widget.__super__.initTemplate.call(this, template);
      return this.initViewModel();
    };

    Widget.prototype.initViewModel = function() {
      var attrs, elem, elems, j, len, selector;
      this.renderingElements = [];
      attrs = Widget.attrs;
      selector = (attrs.map(function(item) {
        return "[data-" + item + "]";
      })).join(",");
      if (!this.node.querySelectorAll) {
        return;
      }
      elems = [].slice.call(this.node.querySelectorAll(selector));
      for (j = 0, len = elems.length; j < len; j++) {
        elem = elems[j];
        this.applyRenderRole(elem);
      }
      return this.applyRootRenderRole(this.node);
    };

    Widget.prototype.handoverUI = function(name) {
      var attr, attrs, el, elem, j, k, len, len1, ref, ref1, selector, value;
      el = this.UI[name];
      if (!el) {
        console.warn("Hand over UI " + name + " not exists");
        return;
      }
      ref = this.renderingElements;
      for (j = 0, len = ref.length; j < len; j++) {
        elem = ref[j];
        if (elem === el || el.contains(elem)) {
          this.removeRenderRole(elem);
          attrs = (function() {
            var k, len1, ref1, results1;
            ref1 = elem.attributes;
            results1 = [];
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              attr = ref1[k];
              results1.push(attr);
            }
            return results1;
          })();
          for (k = 0, len1 = attrs.length; k < len1; k++) {
            attr = attrs[k];
            if (((ref1 = attr.name) != null ? ref1.indexOf("solved-data") : void 0) === 0 && attr.name.indexOf("solved-data-root") !== 0) {
              name = attr.name;
              value = attr.value;
              elem.removeAttribute(attr.name);
              elem.setAttribute(name.replace("solved-", ""), value);
            }
          }
        }
      }
      attrs = Widget.attrs;
      return selector = (attrs.map(function(item) {
        return "[data-" + item + "]";
      })).join(",");
    };

    Widget.prototype.applyRootRenderRole = function(elem) {
      var attr, attrs, info, j, len, results1, solvedAttr, solvedOldValue, value;
      if (elem !== this.node) {
        return;
      }
      if (elem.rootRenderRoleProvider) {
        console.warn(elem, "already has a root render role provider");
        return;
      }
      elem.rootRenderRoleProvider = this;
      attrs = Widget.attrs;
      results1 = [];
      for (j = 0, len = attrs.length; j < len; j++) {
        attr = attrs[j];
        if (info = elem.getAttribute("data-" + attr)) {
          this["_" + attr + "Role"](elem, info);
          elem.removeAttribute("data-" + attr);
          solvedAttr = "solved-data-root-" + attr;
          solvedOldValue = elem.getAttribute(solvedAttr);
          if (solvedOldValue) {
            value = solvedOldValue + (";" + info);
          } else {
            value = info;
          }
          results1.push(elem.setAttribute(solvedAttr, value));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    Widget.prototype.applyRenderRole = function(elem) {
      var attr, attrs, info, j, len, solvedAttr, solvedOldValue, value;
      if (elem === this.node) {
        console.warn("apply render role to root");
        return;
      }
      if (elem.renderRoleProvider) {
        console.error("Duplicate render role", elem);
        return;
      }
      this.renderingElements.push(elem);
      attrs = Widget.attrs;
      for (j = 0, len = attrs.length; j < len; j++) {
        attr = attrs[j];
        if (info = elem.getAttribute("data-" + attr)) {
          this["_" + attr + "Role"](elem, info);
          elem.removeAttribute("data-" + attr);
          solvedAttr = "solved-data-" + attr;
          solvedOldValue = elem.getAttribute(solvedAttr);
          if (solvedOldValue) {
            value = solvedOldValue + (";" + info);
          } else {
            value = info;
          }
          elem.setAttribute(solvedAttr, value);
        }
      }
      return elem.renderRoleProvider = this;
    };

    Widget.prototype.removeRenderRole = function(elem) {
      if (elem.renderRoleProvider !== this) {
        console.warn("Invalid elem render role remove action.");
        return;
      }
      this._ViewModel.stopListenBy(elem);
      return elem.renderRoleProvider = null;
    };

    Widget.prototype._propRole = function(elem, who) {
      var j, len, pair, results1, whats;
      whats = whats.split(",").map(function(item) {
        return item.trim().split(":");
      }).filter(function(pair) {
        return pair.length === 1 || pair.length === 2;
      });
      results1 = [];
      for (j = 0, len = whats.length; j < len; j++) {
        pair = whats[j];
        results1.push((function(_this) {
          return function(pair) {
            var name;
            name = pair[0];
            who = pair[1] || name;
            if (!_this._ViewModel.has(who)) {
              _this._ViewModel.declare(who);
            }
            return _this._ViewModel.listenBy(elem, "change/" + who, function(value) {
              return elem[name] = value;
            });
          };
        })(this)(pair));
      }
      return results1;
    };

    Widget.prototype._textRole = function(elem, who) {
      if (!this._ViewModel.has(who)) {
        this._ViewModel.declare(who);
      }
      return this._ViewModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.textContent = value;
        };
      })(this));
    };

    Widget.prototype._htmlRole = function(elem, who) {
      if (!this._ViewModel.has(who)) {
        this._ViewModel.declare(who);
      }
      return this._ViewModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.innerHTML = value;
        };
      })(this));
    };

    Widget.prototype._classRole = function(elem, whos) {
      var j, len, results1, who;
      whos = whos.split(",").map(function(item) {
        return item.trim();
      }).filter(function(item) {
        return item;
      });
      results1 = [];
      for (j = 0, len = whos.length; j < len; j++) {
        who = whos[j];
        results1.push((function(_this) {
          return function(who) {
            var className, oldClass, ref;
            if (who == null) {
              who = "";
            }
            className = null;
            ref = who.split(":"), who = ref[0], className = ref[1];
            if (!_this._ViewModel.has(who)) {
              _this._ViewModel.declare(who);
            }
            oldClass = "";
            return _this._ViewModel.listenBy(elem, "change/" + who, function(value) {
              var decision, removeClass;
              removeClass = false;
              if (className) {
                decision = value;
                value = className;
                if (!decision) {
                  removeClass = true;
                }
              }
              if (!className && typeof value === "boolean") {
                decision = value;
                value = Leaf.Util.camelToSlug(who);
                if (!decision) {
                  removeClass = true;
                }
              }
              if (removeClass) {
                elem.classList.remove(value);
                oldClass = "";
                return;
              }
              if (value === oldClass) {
                return;
              }
              if (value && elem.classList.contains(value)) {
                if (oldClass && elem.classList.contains(oldClass)) {
                  elem.classList.remove(oldClass);
                }
                oldClass = value;
                return;
              }
              if (oldClass) {
                elem.classList.remove(oldClass);
              }
              if (value && !elem.classList.contains(value)) {
                elem.classList.add(value);
              }
              return oldClass = value;
            });
          };
        })(this)(who));
      }
      return results1;
    };

    Widget.prototype._attributeRole = function(elem, whats) {
      var j, len, pair, results1;
      if (whats == null) {
        whats = "";
      }
      whats = whats.split(",").map(function(item) {
        return item.trim().split(":");
      }).filter(function(pair) {
        return pair.length === 1 || pair.length === 2;
      });
      results1 = [];
      for (j = 0, len = whats.length; j < len; j++) {
        pair = whats[j];
        results1.push((function(_this) {
          return function(pair) {
            var name, who;
            name = pair[0];
            who = pair[1] || name;
            if (!_this._ViewModel.has(who)) {
              _this._ViewModel.declare(who);
            }
            return _this._ViewModel.listenBy(elem, "change/" + who, function(value) {
              elem.setAttribute(name, value);
              return elem[name] = value;
            });
          };
        })(this)(pair));
      }
      return results1;
    };

    Widget.prototype._valueRole = function(elem, who) {
      return this._attributeRole(elem, "value:" + who);
    };

    Widget.prototype._srcRole = function(elem, who) {
      return this._attributeRole(elem, "src:" + who);
    };

    return Widget;

  })(Widget);

  List = (function(superClass) {
    extend(List, superClass);

    function List(template, create) {
      List.__super__.constructor.call(this, template);
      this.init(create);
      Object.defineProperty(this, "length", {
        get: (function(_this) {
          return function() {
            return _this._length;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            var item, j, k, len, ref, ref1, results1, toRemove;
            toRemove = [];
            if (value > _this._length) {
              throw "can't asign length larger than the origin";
            }
            if (value < 0) {
              throw "can't asign length lesser than 0";
            }
            if (typeof value !== "number") {
              throw new TypeError();
            }
            for (index = j = ref = value, ref1 = _this.length; ref <= ref1 ? j < ref1 : j > ref1; index = ref <= ref1 ? ++j : --j) {
              toRemove.push(_this[index]);
              delete _this[index];
            }
            _this._length = value;
            results1 = [];
            for (k = 0, len = toRemove.length; k < len; k++) {
              item = toRemove[k];
              results1.push(_this._detach(item));
            }
            return results1;
          };
        })(this)
      });
    }

    List.prototype.init = function(create) {
      this.create = create || this.create || (function(_this) {
        return function(item) {
          return item;
        };
      })(this);
      return this._length = 0;
    };

    List.prototype.map = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return [].map.apply(this, args);
    };

    List.prototype.some = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return [].some.apply(this, args);
    };

    List.prototype.forEach = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return [].forEach.apply(this, args);
    };

    List.prototype.check = function(item) {
      var child, j, len, results1;
      if (!(item instanceof Widget)) {
        throw "Leaf List only accept widget as element";
      }
      results1 = [];
      for (j = 0, len = this.length; j < len; j++) {
        child = this[j];
        if (child === item) {
          throw "already exists";
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    List.prototype.contains = function() {
      var args, item, j, len;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (j = 0, len = args.length; j < len; j++) {
        item = args[j];
        if (this.indexOf(item) < 0) {
          return false;
        }
      }
      return true;
    };

    List.prototype.indexOf = function(item) {
      var child, j, len;
      for (index = j = 0, len = this.length; j < len; index = ++j) {
        child = this[index];
        if (item === child) {
          return index;
        }
      }
      return -1;
    };

    List.prototype.push = function() {
      var item, items, j, len, results1;
      items = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (j = 0, len = items.length; j < len; j++) {
        item = items[j];
        item = this.create(item);
        this.check(item);
        this[this._length] = item;
        if (this._length !== 0) {
          item.after(this[this._length - 1]);
        } else {
          item.appendTo(this.node);
        }
        this._length++;
        results1.push(this._attach(item));
      }
      return results1;
    };

    List.prototype.pop = function() {
      var item;
      if (this._length === 0) {
        return null;
      }
      this._length -= 1;
      item = this[this._length];
      delete this[this._length];
      this._detach(item);
      return item;
    };

    List.prototype.unshift = function(item) {
      var j, ref;
      item = this.create(item);
      this.check(item);
      if (this._length === 0) {
        item.prependTo(this.node);
        this[0] = item;
        this._length = 1;
        this._attach(item);
        return;
      }
      for (index = j = ref = this._length; ref <= 1 ? j <= 1 : j >= 1; index = ref <= 1 ? ++j : --j) {
        this[index] = this[index - 1];
      }
      this[0] = item;
      this._length += 1;
      item.before(this[1]);
      this._attach(item);
      return this._length;
    };

    List.prototype.removeItem = function(item) {
      index = this.indexOf(item);
      if (index < 0) {
        return index;
      }
      this.splice(index, 1);
      return item;
    };

    List.prototype.shift = function() {
      var j, ref, result;
      result = this[0];
      for (index = j = 0, ref = this._length - 1; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
        this[index] = this[index + 1];
      }
      this._length -= 1;
      this._detach(result);
      return result;
    };

    List.prototype.splice = function() {
      var count, frag, increase, index, item, j, k, l, len, len1, len2, len3, m, n, offset, origin, q, ref, ref1, ref2, ref3, ref4, result, s, toAdd, toAddFinal, toRemoves;
      index = arguments[0], count = arguments[1], toAdd = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      result = [];
      toRemoves = [];
      if (typeof count === "undefined" || index + count > this._length) {
        count = this._length - index;
      }
      for (offset = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; offset = 0 <= ref ? ++j : --j) {
        item = this[index + offset];
        toRemoves.push(item);
        result.push(item);
      }
      toAddFinal = (function() {
        var k, len, results1;
        results1 = [];
        for (k = 0, len = toAdd.length; k < len; k++) {
          item = toAdd[k];
          results1.push(this.create(item));
        }
        return results1;
      }).call(this);
      frag = document.createDocumentFragment();
      for (k = 0, len = toAddFinal.length; k < len; k++) {
        item = toAddFinal[k];
        this.check(item);
        frag.appendChild(item.node);
      }
      if (index < this.length && this.length > 0) {
        this.node.insertBefore(frag, this[index].node);
      } else {
        this.node.appendChild(frag);
      }
      increase = toAddFinal.length - count;
      if (increase < 0) {
        for (origin = l = ref1 = index + count, ref2 = this._length; ref1 <= ref2 ? l < ref2 : l > ref2; origin = ref1 <= ref2 ? ++l : --l) {
          this[origin + increase] = this[origin];
        }
      } else if (increase > 0) {
        for (origin = m = ref3 = this._length - 1, ref4 = index + count - 1; ref3 <= ref4 ? m < ref4 : m > ref4; origin = ref3 <= ref4 ? ++m : --m) {
          this[origin + increase] = this[origin];
        }
      }
      for (offset = n = 0, len1 = toAddFinal.length; n < len1; offset = ++n) {
        item = toAddFinal[offset];
        this[index + offset] = item;
      }
      this._length += increase;
      for (q = 0, len2 = toRemoves.length; q < len2; q++) {
        item = toRemoves[q];
        this._detach(item);
      }
      for (s = 0, len3 = toAddFinal.length; s < len3; s++) {
        item = toAddFinal[s];
        this._attach(item);
      }
      return result;
    };

    List.prototype.slice = function(from, to) {
      return this.toArray().slice(from, to);
    };

    List.prototype.forEach = function(handler) {
      var item, j, len, results1;
      results1 = [];
      for (j = 0, len = this.length; j < len; j++) {
        item = this[j];
        results1.push(handler(item));
      }
      return results1;
    };

    List.prototype.toArray = function() {
      var item;
      return (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = this.length; j < len; j++) {
          item = this[j];
          results1.push(item);
        }
        return results1;
      }).call(this);
    };

    List.prototype._attach = function(item) {
      item.parentList = this;
      this.emit("child/add", item);
      return this.emit("child/change");
    };

    List.prototype._detach = function(item) {
      var node;
      item.parentList = null;
      node = item.node;
      if (node && node.parentElement === this.node) {
        this.node.removeChild(node);
      }
      item.stopListenBy(this);
      this.emit("child/remove", item);
      return this.emit("child/change");
    };

    List.prototype.sort = function(judge) {
      return this.sync(this.toArray().sort(judge));
    };

    return List;

  })(Widget);

  Widget.List = List;

  Widget.makeList = (function(_this) {
    return function(node, create) {
      return new Widget.List(node, create);
    };
  })(this);

  Leaf.Widget = Widget;

  TemplateManager = (function(superClass) {
    extend(TemplateManager, superClass);

    function TemplateManager() {
      TemplateManager.__super__.constructor.call(this);
      this.tids = [];
      this.baseUrl = "template/";
      this.templates = {};
      this.suffix = ".html";
      this.timeout = 10000;
      this.enableCache = false;
      this.randomQuery = true;
      this.cacheName = "templateManagerCache";
    }

    TemplateManager.prototype.use = function() {
      var tids;
      tids = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.tids.push.apply(this.tids, tids);
    };

    TemplateManager.prototype.start = function() {
      return setTimeout(this._start.bind(this), 0);
    };

    TemplateManager.prototype.clearCache = function() {
      if (window.localStorage) {
        return window.localStorage.removeItem(this.cacheName);
      }
    };

    TemplateManager.prototype._start = function() {
      var all, caches, j, k, l, len, len1, len2, ref, ref1, remain, remainTemplates, tid;
      if (this.enableCache) {
        caches = this._fromCacheAll();
        ref = this.tids;
        for (j = 0, len = ref.length; j < len; j++) {
          tid = ref[j];
          this.templates[tid] = caches[tid];
        }
        if (this._isRequirementComplete()) {
          this._ready();
          return this;
        }
      }
      all = this._fromDomAll();
      ref1 = this.tids;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        tid = ref1[k];
        this.templates[tid] = all[tid];
      }
      if (this._isRequirementComplete()) {
        this._ready();
        return this;
      }
      remain = this._getNotCompleteRequirements();
      remainTemplates = this._fromDomForEach(remain);
      for (l = 0, len2 = remain.length; l < len2; l++) {
        tid = remain[l];
        this.templates[tid] = remainTemplates[tid];
      }
      if (this._isRequirementComplete()) {
        this._ready();
        return this;
      }
      remain = this._getNotCompleteRequirements();
      return this._fromXHRForEach(remain, (function(_this) {
        return function(err, tid, template) {
          if (err != null) {
            _this.emit("error", err);
            return;
          }
          _this.templates[tid] = template;
          if (_this._isRequirementComplete()) {
            return _this._ready();
          }
        };
      })(this));
    };

    TemplateManager.prototype._ready = function() {
      if (this.isReady) {
        return;
      }
      this.isReady = true;
      if (this.enableCache && window.localStorage) {
        window.localStorage.setItem(this.cacheName, JSON.stringify(this.templates));
      }
      this.templates = this._extendNestedTemplates(this.templates);
      return this.emit("ready", this.templates);
    };

    TemplateManager.prototype._extendNestedTemplates = function(templates) {
      var j, len, part, pathes, prop, result, root, value;
      result = {};
      for (prop in templates) {
        pathes = prop.split("/");
        result[prop] = templates[prop];
        root = result;
        for (index = j = 0, len = pathes.length; j < len; index = ++j) {
          part = pathes[index];
          if (index === pathes.length - 1) {
            if (typeof root[part] === "object") {
              root["root"] = templates[prop];
            } else if (root[part]) {
              root[part] = templates[prop];
            } else {
              root[part] = templates[prop];
            }
          } else {
            if (typeof root[part] === "string") {
              value = root[part];
              root[part] = {};
              root[part].root = value;
            } else if (typeof root[part] === "object") {
              true;
            } else {
              root[part] = {};
            }
          }
          root = root[part];
        }
      }
      return result;
    };

    TemplateManager.prototype._getNotCompleteRequirements = function() {
      var j, len, ref, results1, tid;
      ref = this.tids;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        tid = ref[j];
        if (!this.templates[tid]) {
          results1.push(tid);
        }
      }
      return results1;
    };

    TemplateManager.prototype._isRequirementComplete = function() {
      var j, len, ref, tid;
      ref = this.tids;
      for (j = 0, len = ref.length; j < len; j++) {
        tid = ref[j];
        if (!this.templates[tid]) {
          return false;
        }
      }
      return true;
    };

    TemplateManager.prototype._fromCacheAll = function() {
      var e, error1, info, templates;
      if (!window.localStorage) {
        return {};
      }
      info = window.localStorage.getItem(this.cacheName);
      if (!info) {
        return {};
      }
      try {
        templates = JSON.parse(info);
        return templates;
      } catch (error1) {
        e = error1;
        return {};
      }
    };

    TemplateManager.prototype._fromDomAll = function() {
      var e, error1;
      try {
        return JSON.parse(document.querySelector("[data-json-templates]").innerHTML);
      } catch (error1) {
        e = error1;
        return {};
      }
    };

    TemplateManager.prototype._fromDomForEach = function(tids) {
      var j, len, templateNode, templates, tid;
      templates = {};
      for (j = 0, len = tids.length; j < len; j++) {
        tid = tids[j];
        templateNode = document.querySelector("[data-template-name='" + tid + "']");
        templates[tid] = templateNode ? templateNode.innerHTML : void 0;
      }
      return templates;
    };

    TemplateManager.prototype._fromXHRForEach = function(tids, callback) {
      var fn1, j, len, targetURI, tid;
      fn1 = (function(_this) {
        return function() {
          var XHR;
          XHR = new XMLHttpRequest();
          XHR.open("GET", targetURI, true);
          XHR.send(null);
          XHR.tid = tid;
          XHR.terminator = setTimeout(function() {
            callback("timeout", XHR.tid, null);
            XHR.done = true;
            return XHR.abort();
          }, _this.timeout);
          return XHR.onreadystatechange = function() {
            var ref;
            if (this.done) {
              return;
            }
            if (this.readyState === 0) {
              callback(new Error("fail to load template"));
              return;
            }
            if (this.readyState === 4) {
              this.done = true;
              if (!this.status || ((ref = this.status) === 200 || ref === 302 || ref === 304)) {
                return callback(null, this.tid, this.responseText);
              } else {
                return callback(this.status, this.tid, null);
              }
            }
          };
        };
      })(this);
      for (j = 0, len = tids.length; j < len; j++) {
        tid = tids[j];
        if (tid.indexOf(".") >= 1) {
          targetURI = this.baseUrl + tid;
        } else {
          targetURI = this.baseUrl + tid + this.suffix;
        }
        if (this.randomQuery && targetURI) {
          if (targetURI.indexOf("?") >= 0) {
            targetURI += "&r=" + (Math.random());
          } else {
            targetURI += "?r=" + (Math.random());
          }
        }
        fn1();
      }
      return null;
    };

    return TemplateManager;

  })(Leaf.EventEmitter);

  exports.TemplateManager = TemplateManager;

  Errors = Leaf.ErrorDoc.create().define("NetworkError").define("ServerError").define("InvalidResponseType").define("Timeout").generate();

  RestApiFactory = (function() {
    RestApiFactory.Errors = Errors;

    function RestApiFactory() {
      this.stateField = "state";
      this.dataField = "data";
      this.errorField = "error";
      this.defaultMethod = "GET";
      this.defaultTimeout = 0;
    }

    RestApiFactory.prototype.prefix = function(prefix) {
      return this._prefix = prefix || "";
    };

    RestApiFactory.prototype.suffix = function(suffix) {
      return this._suffix = suffix || "";
    };

    RestApiFactory.prototype.reset = function() {
      return this._prefix;
    };

    RestApiFactory.prototype.create = function(option) {
      var _url, fn, method, reg, routeParams;
      if (option == null) {
        option = {};
      }
      method = option.method || this.defaultMethod || "GET";
      _url = this._prefix + option.url;
      if (!_url) {
        throw new Error("API require en URL");
      }
      reg = /:[a-z_][a-z0-9_]*/ig;
      routeParams = (_url.match(reg) || []).map(function(item) {
        return item.substring(1);
      });
      return fn = (function(_this) {
        return function(data, callback, config) {
          var prop, reqOption, url, xhr;
          if (callback == null) {
            callback = (function() {
              return true;
            });
          }
          if (config == null) {
            config = {};
          }
          if (option.data) {
            for (prop in option.data) {
              if (typeof data[prop] === "undefined") {
                data[prop] = option.data[prop];
              }
            }
          }
          url = _url;
          for (prop in data) {
            if (indexOf.call(routeParams, prop) >= 0) {
              url = url.replace(new RegExp(":" + prop, "g"), _this.escapeRouteParam(data[prop]));
              delete data[prop];
            }
          }
          reqOption = {
            url: url,
            method: method,
            data: data,
            option: option.option,
            timeout: option.timeout || config.timeout || _this.defaultTimeout || 0
          };
          xhr = _this.request(reqOption, callback);
          return xhr;
        };
      })(this);
    };

    RestApiFactory.prototype.escapeRouteParam = function(data) {
      return encodeURIComponent(data);
    };

    RestApiFactory.prototype.parse = function(err, data, callback) {
      if (data == null) {
        data = {};
      }
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      if (err) {
        callback(err);
        return;
      }
      if (data[this.stateField]) {
        callback(null, data[this.dataField]);
      } else {
        callback(data.error || new Errors.ServerError("server return state false but not return any error information", {
          raw: data
        }));
      }
    };

    RestApiFactory.prototype.request = function(option, callback) {
      var _callback, done, method, timer, url, xhr;
      if (option == null) {
        option = {};
      }
      method = option.method || "GET";
      if (method.toLowerCase() === "get") {
        url = option.url + "?" + this._encodeDataPayload(option.data);
      } else {
        url = option.url;
      }
      xhr = new XMLHttpRequest();
      xhr.open(method, url, true);
      xhr.setRequestHeader("Accept", "application/json");
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      done = false;
      _callback = callback;
      timer = null;
      callback = (function(_this) {
        return function(err, response) {
          clearTimeout(timer);
          callback = function() {};
          return (option.parser || _this.parse.bind(_this))(err, response, _callback);
        };
      })(this);
      if (option.timeout) {
        timer = setTimeout(function() {
          callback = function() {};
          _callback(new Errors.Timeout("Request timeout after " + option.timeout + " sec"), {
            timeout: option.timeout
          });
          return xhr.abort();
        }, option.timeout * 1000);
      }
      xhr.onreadystatechange = (function(_this) {
        return function() {
          var data, e, error1;
          if (xhr.readyState === 0 && !done) {
            callback(new Errors.NetworkError(), null);
            return;
          }
          if (xhr.readyState === 4) {
            done = true;
            if (xhr.responseText) {
              try {
                data = JSON.parse(xhr.responseText);
              } catch (error1) {
                e = error1;
                callback(new Errors.NetworkError("Broken response", {
                  via: new Errors.InvalidResponseType("fail to parse server data", {
                    raw: xhr.responseText
                  })
                }, xhr.responseText));
                return;
              }
              return callback(null, data);
            } else {
              return callback(new Errors.NetworkError("Empty response", {
                via: Errors.InvalidResponseType("Server return empty response")
              }));
            }
          }
        };
      })(this);
      if (method.toLowerCase() !== "get") {
        xhr.send(this._encodeDataPayload(option.data));
      } else {
        xhr.send();
      }
      return xhr;
    };

    RestApiFactory.prototype._encodeDataPayload = function(data) {
      if (data == null) {
        data = {};
      }
      return this.querify(data);
    };

    RestApiFactory.prototype.querify = function(data) {
      var base, encode, isolate, item, j, keys, len, querys, results, value;
      encode = encodeURIComponent;
      isolate = function(data) {
        var item, j, k, len, len1, part, prop, result;
        if (typeof data === "string") {
          return [encode(data)];
        } else if (typeof data === "number") {
          return [encode(data)];
        } else if (typeof data instanceof Date) {
          return data.toString();
        } else if (!data) {
          return [];
        }
        result = [];
        if (data instanceof Array) {
          for (index = j = 0, len = data.length; j < len; index = ++j) {
            item = data[index];
            result.push([index].concat(isolate(item)));
          }
          return result;
        }
        for (prop in data) {
          part = isolate(data[prop]);
          for (k = 0, len1 = part.length; k < len1; k++) {
            item = part[k];
            result.push([encode(prop)].concat(item));
          }
        }
        return result;
      };
      results = isolate(data);
      querys = [];
      for (j = 0, len = results.length; j < len; j++) {
        item = results[j];
        if (item.length < 2) {
          continue;
        }
        value = item.pop();
        base = item.shift();
        keys = item.map(function(key) {
          return "[" + key + "]";
        });
        querys.push(base + keys.join("") + "=" + value);
      }
      return querys.join("&");
    };

    return RestApiFactory;

  })();

  exports.RestApiFactory = RestApiFactory;

  if (EventEmitter == null) {
    EventEmitter = (require("eventex")).EventEmitter;
  }

  if (typeof Buffer === "undefined") {
    BufferObject = function() {};
  } else {
    BufferObject = Buffer;
  }

  MessageCenter = (function(superClass) {
    extend(MessageCenter, superClass);

    MessageCenter.stringify = function(obj) {
      return JSON.stringify(this.normalize(obj));
    };

    MessageCenter.normalize = function(obj) {
      var _, item, prop;
      if (typeof obj !== "object") {
        return obj;
      }
      if (obj instanceof Array) {
        return (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = obj.length; j < len; j++) {
            item = obj[j];
            results1.push(this.normalize(item));
          }
          return results1;
        }).call(this);
      }
      if (obj === null) {
        return null;
      } else if (obj instanceof BufferObject) {
        return {
          __mc_type: "buffer",
          value: obj.toString("base64")
        };
      } else if (obj instanceof Date) {
        return {
          __mc_type: "date",
          value: obj.getTime()
        };
      } else if (obj instanceof WritableStream) {
        return {
          __mc_type: "stream",
          id: obj.id
        };
      } else {
        _ = {};
        for (prop in obj) {
          _[prop] = this.normalize(obj[prop]);
        }
        return _;
      }
    };

    MessageCenter.denormalize = function(obj, option) {
      var _, item, prop;
      if (option == null) {
        option = {};
      }
      if (typeof obj !== "object") {
        return obj;
      }
      if (obj === null) {
        return null;
      }
      if (obj instanceof Array) {
        return (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = obj.length; j < len; j++) {
            item = obj[j];
            results1.push(this.denormalize(item, option));
          }
          return results1;
        }).call(this);
      } else if (obj.__mc_type === "buffer") {
        return new BufferObject(obj.value, "base64");
      } else if (obj.__mc_type === "date") {
        return new Date(obj.value);
      } else if (obj.__mc_type === "stream") {
        return new ReadableStream(option.owner, obj.id);
      } else {
        _ = {};
        for (prop in obj) {
          _[prop] = this.denormalize(obj[prop], option);
        }
        return _;
      }
    };

    MessageCenter.parse = function(str, option) {
      var _, json;
      json = JSON.parse(str);
      _ = this.denormalize(json, option);
      return _;
    };

    function MessageCenter() {
      this.idPool = 1000;
      this.invokeWaiters = [];
      this.apis = [];
      this.timeout = 1000 * 60;
      this.streams = [];
      this.customTypes = {};
      MessageCenter.__super__.constructor.call(this);
    }

    MessageCenter.prototype.denormalize = function(obj, option) {
      var ClassObject, _, item, prop, result;
      if (option == null) {
        option = {};
      }
      if (typeof obj !== "object") {
        return obj;
      }
      if (obj === null) {
        return null;
      }
      if (obj instanceof Array) {
        return (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = obj.length; j < len; j++) {
            item = obj[j];
            results1.push(this.denormalize(item, option));
          }
          return results1;
        }).call(this);
      } else if (result = this.customDenormalize(obj)) {
        return result;
      } else if (obj.__mc_type === "buffer") {
        return new BufferObject(obj.value, "base64");
      } else if (obj.__mc_type === "date") {
        return new Date(obj.value);
      } else if (obj.__mc_type === "stream") {
        return new ReadableStream(option.owner, obj.id);
      } else if (ClassObject = this.getMatchingSerializableType(obj.__mc_type)) {
        return ClassObject.fromJSON(obj.serialized);
      } else {
        _ = {};
        for (prop in obj) {
          _[prop] = this.denormalize(obj[prop], option);
        }
        return _;
      }
    };

    MessageCenter.prototype.normalize = function(obj) {
      var ClassObject, _, item, prop, result;
      if (typeof obj !== "object") {
        return obj;
      }
      if (obj instanceof Array) {
        return (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = obj.length; j < len; j++) {
            item = obj[j];
            results1.push(this.normalize(item));
          }
          return results1;
        }).call(this);
      }
      if (obj === null) {
        return null;
      } else if (result = this.customNormalize(obj)) {
        return result;
      } else if (obj instanceof BufferObject) {
        return {
          __mc_type: "buffer",
          value: obj.toString("base64")
        };
      } else if (obj instanceof Date) {
        return {
          __mc_type: "date",
          value: obj.getTime()
        };
      } else if (obj instanceof WritableStream) {
        return {
          __mc_type: "stream",
          id: obj.id
        };
      } else if (ClassObject = this.getMatchingSerializableType(obj)) {
        return {
          __mc_type: obj.__mc_type,
          serialized: obj.serialize()
        };
      } else if (obj.toJSON) {
        return obj.toJSON();
      } else {
        _ = {};
        for (prop in obj) {
          _[prop] = this.normalize(obj[prop]);
        }
        return _;
      }
    };

    MessageCenter.prototype.getMatchingSerializableType = function(obj) {
      var ClassObject;
      if (!obj) {
        return null;
      }
      if (typeof obj === "string") {
        return this.customTypes[obj];
      }
      ClassObject = this.customTypes[obj.__mc_type];
      if (!ClassObject) {
        return null;
      }
      if (obj instanceof ClassObject) {
        return ClassObject;
      }
      return null;
    };

    MessageCenter.prototype.registerSerializableType = function(name, ClassObject) {
      if (ClassObject.prototype.__mc_type !== name) {
        throw new Error("Serializable must be a constructor with prototype.__mc_type matching the registered name");
      }
      if (typeof ClassObject.fromSerialized) {
        throw new Error("Serializable.fromJSON must be a function");
      }
      if (typeof ClassObject.prototype.serialize) {
        throw new Error("Serializable.prototype.toJSON must be a function");
      }
      return this.customTypes[name] = ClassObject;
    };

    MessageCenter.prototype.parse = function(str, option) {
      var _, json;
      json = JSON.parse(str);
      _ = this.denormalize(json, option);
      return _;
    };

    MessageCenter.prototype.stringify = function(data) {
      return JSON.stringify(this.normalize(data));
    };

    MessageCenter.prototype.getInvokeId = function() {
      return this.idPool++;
    };

    MessageCenter.prototype.registerApi = function(name, handler, overwrite) {
      var api, j, len, ref;
      name = name.trim();
      if (!handler) {
        throw new Error("need handler to work");
      }
      ref = this.apis;
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        api = ref[index];
        if (api.name === name) {
          if (!overwrite) {
            throw new Error("duplicated api name " + name);
          } else {
            this.apis[index] = null;
          }
        }
      }
      this.apis = this.apis.filter(function(api) {
        return api;
      });
      return this.apis.push({
        name: name,
        handler: handler
      });
    };

    MessageCenter.prototype.setConnection = function(connection) {
      this.connection = connection;
      this._handler = (function(_this) {
        return function(message) {
          if (_this.connection !== connection) {
            return;
          }
          return _this.handleMessage(message);
        };
      })(this);
      return this.connection.on("message", this._handler);
    };

    MessageCenter.prototype.unsetConnection = function() {
      var j, len, ref, stream;
      if (this.connection) {
        this.connection.removeListener("message", this._handler);
      }
      this._handler = null;
      this.connection = null;
      ref = this.streams.slice();
      for (j = 0, len = ref.length; j < len; j++) {
        stream = ref[j];
        stream.close();
      }
      this.emit("unsetConnection");
      return this.clearAll();
    };

    MessageCenter.prototype.response = function(id, err, data) {
      var message;
      message = this.stringify({
        id: id,
        type: "response",
        data: data,
        error: err
      });
      if (!this.connection) {
        return;
      }
      return this.connection.send(message);
    };

    MessageCenter.prototype.invoke = function(name, data, callback) {
      var controller, e, error1, message, req, waiter;
      if (callback == null) {
        callback = function() {};
      }
      callback = callback || function() {
        return true;
      };
      req = {
        type: "invoke",
        id: this.getInvokeId(),
        name: name,
        data: data
      };
      waiter = {
        request: req,
        id: req.id,
        callback: callback,
        date: new Date
      };
      this.invokeWaiters.push(waiter);
      message = this.stringify(req);
      controller = {
        _timer: null,
        waiter: waiter,
        timeout: function(value) {
          if (this._timer) {
            clearTimeout(this._timer);
          }
          if (value > 0) {
            return this._timer = setTimeout(controller.clear, value);
          }
        },
        clear: (function(_this) {
          return function(error) {
            return _this.clearInvokeWaiter(waiter.id, error || new Error("timeout"));
          };
        })(this)
      };
      waiter.controller = controller;
      controller.timeout(this.timeout);
      if (this.connection) {
        try {
          this.connection.send(message);
        } catch (error1) {
          e = error1;
          controller.clear(e);
        }
      } else {
        controller.clear(new Error("connection not set"));
      }
      return controller;
    };

    MessageCenter.prototype.fireEvent = function() {
      var message, name, params;
      name = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      message = this.stringify({
        type: "event",
        name: name,
        params: params
      });
      if (this.connection) {
        this.connection.send(message);
      }
      return message;
    };

    MessageCenter.prototype.handleMessage = function(message) {
      var e, error1, info, ref;
      try {
        info = this.parse(message, {
          owner: this
        });
      } catch (error1) {
        e = error1;
        console.error("Broken Message", e);
        this.emit("error", new Error("invalid message " + message));
        return;
      }
      if (!info.type || ((ref = info.type) !== "invoke" && ref !== "event" && ref !== "response" && ref !== "stream")) {
        this.emit("error", new Error("invalid message " + message + " invalid info type"));
        return;
      }
      if (info.type === "stream") {
        return this.handleStreamData(info);
      } else if (info.type === "response") {
        return this.handleResponse(info);
      } else if (info.type === "invoke") {
        return this.handleInvoke(info);
      } else if (info.type === "event") {
        return this.handleEvent(info);
      } else {
        return this.emit("error", new Error("invalid message"));
      }
    };

    MessageCenter.prototype.handleEvent = function(info) {
      var args;
      if (!info.name) {
        this.emit("error", new Error("invalid message " + (JSON.stringify(info))));
      }
      args = ["event/" + info.name].concat(info.params || []);
      this.emit.apply(this, args);
      return this.emit("remoteEvent", info.name, info.params);
    };

    MessageCenter.prototype.handleResponse = function(info) {
      var found;
      if (!info.id) {
        this.emit("error", new Error("invalid message " + (JSON.stringify(info))));
      }
      found = this.invokeWaiters.some((function(_this) {
        return function(waiter, index) {
          if (waiter.id === info.id) {
            _this.clearInvokeWaiter(info.id, null);
            waiter.callback(info.error, info.data);
            return true;
          }
          return false;
        };
      })(this));
      return found;
    };

    MessageCenter.prototype.clearInvokeWaiter = function(id, error) {
      return this.invokeWaiters = this.invokeWaiters.filter(function(waiter) {
        if (waiter.id === id) {
          if (waiter.controller && waiter.controller._timer) {
            clearTimeout(waiter.controller._timer);
          }
          if (error) {
            waiter.callback(error);
          }
          return false;
        }
        return true;
      });
    };

    MessageCenter.prototype.handleInvoke = function(info) {
      var api, j, len, ref, target;
      if (!info.id || !info.name) {
        this.emit("error", new Error("invalid message " + (JSON.stringify(info))));
      }
      target = null;
      ref = this.apis;
      for (j = 0, len = ref.length; j < len; j++) {
        api = ref[j];
        if (api.name === info.name) {
          target = api;
          break;
        }
      }
      if (!target) {
        return this.response(info.id, {
          message: info.name + " api not found",
          code: "ERRNOTFOUND"
        });
      }
      return target.handler(info.data, (function(_this) {
        return function(err, data) {
          return _this.response(info.id, err, data);
        };
      })(this), this);
    };

    MessageCenter.prototype.clone = function() {
      var api, j, len, mc, ref;
      mc = new MessageCenter();
      ref = this.mc.apis;
      for (j = 0, len = ref.length; j < len; j++) {
        api = ref[j];
        mc.registerApi(api.name, api.handler);
      }
      return mc;
    };

    MessageCenter.prototype.clearAll = function() {
      var results1, waiter;
      results1 = [];
      while (this.invokeWaiters[0]) {
        waiter = this.invokeWaiters[0];
        results1.push(this.clearInvokeWaiter(waiter.id, new Error("abort")));
      }
      return results1;
    };

    MessageCenter.prototype.createStream = function() {
      var stream;
      stream = new WritableStream(this);
      return stream;
    };

    MessageCenter.prototype.handleStreamData = function(info) {
      if (!info.id) {
        this.emit("error", new Error("invalid stream data " + (JSON.stringify(info))));
      }
      return this.streams.some(function(stream) {
        if (stream.id === info.id) {
          if (info.end) {
            stream.close();
          } else {
            stream.emit("data", info.data);
          }
          return true;
        }
      });
    };

    MessageCenter.prototype.transferStream = function(stream) {
      var data, e, error1, results1;
      if (this.connection) {
        try {
          if (stream.isEnd) {
            return;
          }
          results1 = [];
          while (stream.buffers.length > 0) {
            data = stream.buffers.shift();
            results1.push(this.connection.send(data));
          }
          return results1;
        } catch (error1) {
          e = error1;
        }
      }
    };

    MessageCenter.prototype.endStream = function(stream) {
      var e, error1;
      this.transferStream(stream);
      if (this.connection) {
        try {
          this.connection.send(JSON.stringify({
            id: stream.id,
            end: true,
            type: "stream"
          }));
          return stream.isEnd = true;
        } catch (error1) {
          e = error1;
        }
      }
    };

    MessageCenter.prototype.addStream = function(stream) {
      if (indexOf.call(this.streams, stream) < 0) {
        return this.streams.push(stream);
      }
    };

    MessageCenter.prototype.removeStream = function(stream) {
      index = this.streams.indexOf(stream);
      if (index < 0) {
        return;
      }
      return this.streams.splice(index, 1);
    };

    MessageCenter.prototype.customNormalize = function(obj) {
      return null;
    };

    MessageCenter.prototype.customDenormalize = function(obj) {
      return null;
    };

    MessageCenter.isReadableStream = function(stream) {
      return stream instanceof ReadableStream;
    };

    MessageCenter.isWritableStream = function(stream) {
      return stream instanceof WritableStream;
    };

    return MessageCenter;

  })(EventEmitter);

  ReadableStream = (function(superClass) {
    extend(ReadableStream, superClass);

    function ReadableStream(messageCenter, id1) {
      this.messageCenter = messageCenter;
      this.id = id1;
      ReadableStream.__super__.constructor.call(this);
      this.messageCenter.addStream(this);
    }

    ReadableStream.prototype.close = function() {
      if (this.isClose) {
        return;
      }
      this.isClose = true;
      this.emit("end");
      return this.messageCenter.removeStream(this);
    };

    return ReadableStream;

  })(EventEmitter);

  WritableStream = (function(superClass) {
    extend(WritableStream, superClass);

    WritableStream.id = 1000;

    function WritableStream(messageCenter) {
      this.messageCenter = messageCenter;
      WritableStream.__super__.constructor.call(this);
      this.buffers = [];
      this.index = 0;
      this.id = WritableStream.id++;
      this.messageCenter.once("unsetConnection", (function(_this) {
        return function() {
          return _this.isEnd = true;
        };
      })(this));
    }

    WritableStream.prototype.write = function(data) {
      if (this.isEnd) {
        throw new Error("stream already end");
      }
      if (!data) {
        return;
      }
      this.buffers.push(this.messageCenter.stringify({
        id: this.id,
        index: this.index++,
        data: data,
        type: "stream"
      }));
      return this.messageCenter.transferStream(this);
    };

    WritableStream.prototype.end = function(data) {
      if (this.isEnd) {
        throw new Error("stream already end");
      }
      this.write(data);
      this.messageCenter.endStream(this);
      if (process && process.nextTick) {
        return process.nextTick((function(_this) {
          return function() {
            return _this.emit("finish");
          };
        })(this));
      } else {
        return setTimeout(((function(_this) {
          return function() {
            return _this.emit("finish");
          };
        })(this)), 0);
      }
    };

    return WritableStream;

  })(EventEmitter);

  if (Leaf == null) {
    module.exports = MessageCenter;
    module.exports.MessageCenter = MessageCenter;
  } else {
    Leaf.MessageCenter = MessageCenter;
  }

  IPCConnection = (function(superClass) {
    extend(IPCConnection, superClass);

    function IPCConnection(target1) {
      this.target = target1;
      IPCConnection.__super__.constructor.call(this);
      this.target.addEventListener("message", (function(_this) {
        return function(e) {
          return _this.emit("message", e.data);
        };
      })(this));
    }

    IPCConnection.prototype.send = function(message) {
      return this.target.postMessage(message);
    };

    return IPCConnection;

  })(EventEmitter);

  ReceiverLayer = (function(superClass) {
    extend(ReceiverLayer, superClass);

    function ReceiverLayer(worker) {
      this.worker = worker;
      ReceiverLayer.__super__.constructor.call(this);
      this.connection = new IPCConnection(this.worker);
      this.messageCenter = new MessageCenter();
      this.messageCenter.setConnection(this.connection);
      new Subscribable(this);
      new IPCDataDenormalizable(this);
      new ModelReceivable(this);
      new BackgroundAPIBuilder(this);
      new ReadyAware(this);
    }

    ReceiverLayer.prototype.debug = function() {
      return this.isDebug = true;
    };

    ReceiverLayer.prototype.invokeRawApi = function(name, data, callback) {
      if (this.isDebug) {
        console.debug("Invoke Raw API", name, data);
      }
      return this.messageCenter.invoke("" + name, data, (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (_this.isDebug) {
            console.debug.apply(console, ["API " + name + " return"].concat(slice.call(args), ["EOA"]));
          }
          return callback.apply(null, args);
        };
      })(this));
    };

    return ReceiverLayer;

  })(EventEmitter);

  ReadyAware = (function(superClass) {
    extend(ReadyAware, superClass);

    function ReadyAware() {
      return ReadyAware.__super__.constructor.apply(this, arguments);
    }

    ReadyAware.prototype.isReady = false;

    ReadyAware.prototype.initialize = function() {
      return this.messageCenter.once("event/ready", (function(_this) {
        return function() {
          _this.isReady = true;
          return _this.emit("ready");
        };
      })(this));
    };

    ReadyAware.prototype.whenReady = function(callback) {
      if (this.isReady) {
        return callback();
      } else {
        return this.once("ready", callback);
      }
    };

    return ReadyAware;

  })(Trait);

  BackgroundAPIBuilder = (function(superClass) {
    extend(BackgroundAPIBuilder, superClass);

    function BackgroundAPIBuilder() {
      return BackgroundAPIBuilder.__super__.constructor.apply(this, arguments);
    }

    BackgroundAPIBuilder.prototype.API = {};

    BackgroundAPIBuilder.prototype.initialize = function() {
      return this.messageCenter.registerApi("addAPI", (function(_this) {
        return function(option, callback) {
          if (option == null) {
            option = {};
          }
          if (_this.API[option.name]) {
            console.error("API Conflict", option.name);
            callback(new Error("APIConflict"));
            return;
          }
          if (_this.isDebug) {
            console.debug("Declare API " + option.name);
          }
          _this.API[option.name] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this.invokeRawApi.apply(_this, ["backgroundAPI/" + option.name].concat(slice.call(args)));
          };
          return callback();
        };
      })(this));
    };

    return BackgroundAPIBuilder;

  })(Trait);

  IPCDataDenormalizable = (function(superClass) {
    extend(IPCDataDenormalizable, superClass);

    function IPCDataDenormalizable() {
      return IPCDataDenormalizable.__super__.constructor.apply(this, arguments);
    }

    IPCDataDenormalizable.prototype.initialize = function() {
      this.messageCenter.customDenormalize = this.customDenormalize.bind(this);
      return this.customDenormalizeHandlers = [];
    };

    IPCDataDenormalizable.prototype.customDenormalize = function(data) {
      var handler, j, len, ref, result;
      ref = this.customDenormalizeHandlers;
      for (j = 0, len = ref.length; j < len; j++) {
        handler = ref[j];
        if (result = handler(data)) {
          return result;
        }
      }
      return null;
    };

    IPCDataDenormalizable.prototype.registerCustomDenormalize = function(handler) {
      return this.customDenormalizeHandlers.push(handler);
    };

    return IPCDataDenormalizable;

  })(Trait);

  Subscribable = (function(superClass) {
    extend(Subscribable, superClass);

    function Subscribable() {
      return Subscribable.__super__.constructor.apply(this, arguments);
    }

    Subscribable.prototype.initialize = function() {
      return this.messageCenter.listenBy(this, "remoteEvent", function(name, params) {
        if (name === "publish") {
          return this._handlePublish.apply(this, params);
        }
      });
    };

    Subscribable.prototype.subscribeBy = function(who, name, handler) {
      return this.listenBy(who, "publish/" + name, handler);
    };

    Subscribable.prototype.subscribeByOnce = function(who, name, handler) {
      return this.listenByOnce(who, "publish/" + name, handler);
    };

    Subscribable.prototype.unsubscribeBy = function(who, name, handler) {
      return this.stopListenBy(who, "publish/" + name, handler);
    };

    Subscribable.prototype._handlePublish = function(detail) {
      return this.emit("publish/" + detail.name, detail.args);
    };

    return Subscribable;

  })(Trait);

  ForegroundModel = (function(superClass) {
    var WatchState;

    extend(ForegroundModel, superClass);

    ForegroundModel.idIndex = 100000;

    function ForegroundModel(layer, modelId, model) {
      var field, j, len, ref;
      this.layer = layer;
      ForegroundModel.__super__.constructor.call(this);
      this._foregroundModelId = ForegroundModel.idIndex++;
      this._initAt = new Date();
      if (modelId) {
        this._modelId = modelId;
        this._isConnected = true;
      } else {
        this._modelId = null;
        this._isConnected = false;
      }
      ref = model.fields;
      for (j = 0, len = ref.length; j < len; j++) {
        field = ref[j];
        this.declare(field);
        this[field] = model[field];
      }
      this.watchState = new WatchState(this);
      this.__defineGetter__("isWatching", (function(_this) {
        return function() {
          return _this.watchState.data.isWatching;
        };
      })(this));
    }

    ForegroundModel.prototype.watchBy = function(who, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.watch(callback);
    };

    ForegroundModel.prototype.unwatchBy = function(who, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.watch(callback);
    };

    ForegroundModel.prototype.watch = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.watchState.feed("watchSignal", true, callback);
    };

    ForegroundModel.prototype.unwatch = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.watchState.feed("watchSignal", true, callback);
    };

    WatchState = (function(superClass1) {
      extend(WatchState, superClass1);

      function WatchState(fm1) {
        this.fm = fm1;
        this.layer = this.fm.layer;
        WatchState.__super__.constructor.call(this);
        this.setState("standBy");
      }

      WatchState.prototype.atPanic = function() {
        var base1;
        this.recover();
        if (typeof (base1 = this.data).watchStateCallback === "function") {
          base1.watchStateCallback();
        }
        return this.setState("standBy");
      };

      WatchState.prototype.atStandBy = function() {
        return this.consumeWhenAvailable("watchSignal", (function(_this) {
          return function(shouldWatch, callback) {
            _this.data.watchStateCallback;
            _this.data.shouldWatch = shouldWatch;
            if (_this.data.shouldWatch) {
              return _this.setState("watching");
            } else {
              return _this.setState("unwatching");
            }
          };
        })(this));
      };

      WatchState.prototype.atWatching = function() {
        if (this.data.isWatching) {
          this.setState("watchSuccess");
          return;
        }
        return this.layer.messageCenter.invoke("modelProvider/watch", {
          id: this.fm._modelId,
          watcher: this.fm._foregroundModelId
        }, (function(_this) {
          return function(err) {
            if (err) {
              return _this.error(err);
            } else {
              return _this.setState("watchSuccess");
            }
          };
        })(this));
      };

      WatchState.prototype.atWatchSuccess = function() {
        var base1;
        if (!this.data.isWatching) {
          this.data.isWatching = true;
          this.layer.addWatchedModel(this.fm);
          this.emit("watchStateChange");
        }
        if (typeof (base1 = this.data).watchStateCallback === "function") {
          base1.watchStateCallback();
        }
        return this.setState("standBy");
      };

      WatchState.prototype.atUnwatchSuccess = function() {
        var base1;
        if (this.data.isWatching) {
          this.data.isWatching = false;
          this.layer.removeWatchedModel(this.fm);
          this.emit("watchStateChange");
        }
        if (typeof (base1 = this.data).watchStateCallback === "function") {
          base1.watchStateCallback();
        }
        return this.setState("standBy");
      };

      WatchState.prototype.atUnwatching = function() {
        return this.layer.messageCenter.invoke("modelProvider/unwatch", {
          id: this.fm._modelId,
          watcher: this.fm._foregroundModelId
        }, (function(_this) {
          return function(err) {
            if (err) {
              return _this.error(err);
            } else {
              return _this.setState("unwatchSuccess");
            }
          };
        })(this));
      };

      return WatchState;

    })(States);

    return ForegroundModel;

  })(Leaf.Model);

  DummyModel = (function(superClass) {
    extend(DummyModel, superClass);

    function DummyModel() {
      DummyModel.__super__.constructor.call(this);
      this._watcher = [];
    }

    DummyModel.prototype.install = function(model) {
      var name;
      if (!(model instanceof Leaf.Model)) {
        return false;
      }
      if (model === this.srcModel) {
        return true;
      }
      if (this.srcModel) {
        this.uninstall();
      }
      this.srcModel = model;
      for (name in model._defines) {
        this.declare(name);
      }
      this.srcModel.listenBy(this, "change", (function(_this) {
        return function() {
          return _this.sets(_this.srcModel.data);
        };
      })(this));
      this.sets(this.srcModel.data);
      this._syncSrcWatching();
      return true;
    };

    DummyModel.prototype.isInstalled = function() {
      return this.srcModel != null;
    };

    DummyModel.prototype.uninstall = function() {
      var name;
      if (!this.srcModel) {
        return;
      }
      for (name in this._defines) {
        this.undeclare(name);
      }
      if (this.srcModel instanceof ForegroundModel && this._isSrcModelWatching) {
        this.srcModel.unwatchBy(this);
      }
      this.srcModel.stopListenBy(this);
      this._isSrcModelWatching = false;
      return this.srcModel = null;
    };

    DummyModel.prototype.watchBy = function(who, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (indexOf.call(this._watcher, who) >= 0) {
        callback();
        return;
      }
      this._watcher.push(who);
      if (this._isWatching) {
        callback();
        return;
      }
      this._isWatching = true;
      return this._syncSrcWatching();
    };

    DummyModel.prototype.unwatchBy = function(who, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (indexOf.call(this._watcher, who) < 0) {
        callback();
        return;
      }
      if (!this._isWatching) {
        callback();
        return;
      }
      this._watcher = this._watcher.filter(function(item) {
        return item !== who;
      });
      if (this._watcher.length === 0) {
        this._isWatching = false;
      }
      return this._syncSrcWatching(callback);
    };

    DummyModel.prototype._syncSrcWatching = function(callback) {
      var ref, ref1;
      if (callback == null) {
        callback = function() {};
      }
      if (!(this.srcModel instanceof ForegroundModel)) {
        return;
      }
      if (this._isWatching && !this._isSrcModelWatching) {
        this._isSrcModelWatching = true;
        return (ref = this.srcModel) != null ? ref.watchBy(this, callback) : void 0;
      } else if (!this._isWatching && this._isSrcModelWatching) {
        this._isSrcModelWatching = false;
        return (ref1 = this.srcModel) != null ? ref1.unwatchBy(this, callback) : void 0;
      } else {
        return callback();
      }
    };

    return DummyModel;

  })(Leaf.Model);

  ProviderLayer = (function(superClass) {
    extend(ProviderLayer, superClass);

    function ProviderLayer(parent) {
      this.parent = parent;
      ProviderLayer.__super__.constructor.call(this);
      this.connection = new IPCConnection(this.parent);
      this.messageCenter = new MessageCenter();
      this.messageCenter.setConnection(this.connection);
      new Publishable(this);
      new IPCDataNormalizable(this);
      new ModelProvidable(this);
    }

    ProviderLayer.prototype.debug = function() {
      return this.isDebug = true;
    };

    ProviderLayer.prototype.registerAPI = function(name, handler, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (this.isDebug) {
        console.debug("Try registering API", name);
      }
      return this.messageCenter.invoke("addAPI", {
        name: name
      }, (function(_this) {
        return function(err) {
          if (err) {
            console.error(err);
            callback(err);
            return;
          }
          if (_this.isDebug) {
            console.debug("API registered", name);
          }
          _this.messageCenter.registerApi("backgroundAPI/" + name, function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return handler.apply(null, args);
          });
          return callback();
        };
      })(this));
    };

    ProviderLayer.prototype.ready = function() {
      return this.messageCenter.fireEvent("ready");
    };

    return ProviderLayer;

  })(EventEmitter);

  IPCDataNormalizable = (function(superClass) {
    extend(IPCDataNormalizable, superClass);

    function IPCDataNormalizable() {
      return IPCDataNormalizable.__super__.constructor.apply(this, arguments);
    }

    IPCDataNormalizable.prototype.initialize = function() {
      this.messageCenter.customNormalize = this.customNormalize.bind(this);
      return this.customNormalizeHandlers = [];
    };

    IPCDataNormalizable.prototype.customNormalize = function(data) {
      var handler, j, len, ref, result;
      ref = this.customNormalizeHandlers;
      for (j = 0, len = ref.length; j < len; j++) {
        handler = ref[j];
        if (result = handler(data)) {
          return result;
        }
      }
      return null;
    };

    IPCDataNormalizable.prototype.registerCustomNormalize = function(handler) {
      return this.customNormalizeHandlers.push(handler);
    };

    return IPCDataNormalizable;

  })(Trait);

  Publishable = (function(superClass) {
    extend(Publishable, superClass);

    function Publishable() {
      return Publishable.__super__.constructor.apply(this, arguments);
    }

    Publishable.prototype.publish = function() {
      var args, name;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.messageCenter.fireEvent("publish", {
        name: name,
        args: args
      });
    };

    return Publishable;

  })(Trait);

  ModelReceivable = (function(superClass) {
    extend(ModelReceivable, superClass);

    function ModelReceivable() {
      return ModelReceivable.__super__.constructor.apply(this, arguments);
    }

    ModelReceivable.prototype.modelClasses = null;

    ModelReceivable.prototype.watchingForegroundModels = null;

    ModelReceivable.prototype.initialize = function() {
      this.modelClasses = {};
      this.watchingForegroundModels = {};
      this.registerCustomDenormalize(this.denormalizeModel.bind(this));
      return this.messageCenter.listenBy(ModelReceivable, "event/model/change", (function(_this) {
        return function(id, changes) {
          var fid, fm, fms, results1;
          fms = _this.watchingForegroundModels[id] || {};
          results1 = [];
          for (fid in fms) {
            fm = fms[fid];
            results1.push(fm.sets(changes));
          }
          return results1;
        };
      })(this));
    };

    ModelReceivable.prototype.denormalizeModel = function(data) {
      var info, model;
      if (!data || !data.__mc_type) {
        return null;
      }
      if (!(info = this.modelClasses[data.__mc_type])) {
        return null;
      }
      model = new info.Model(data.props);
      return new ForegroundModel(this, data.modelId, model);
    };

    ModelReceivable.prototype.addWatchedModel = function(fm) {
      var base1, fms, name1;
      fms = (base1 = this.watchingForegroundModels)[name1 = fm._modelId] != null ? base1[name1] : base1[name1] = {};
      return fms[fm._foregroundModelId] = fm;
    };

    ModelReceivable.prototype.removeWatchedModel = function(fm) {
      var base1, fms, name1;
      fms = (base1 = this.watchingForegroundModels)[name1 = fm._modelId] != null ? base1[name1] : base1[name1] = {};
      return delete fms[fm._foregroundModelId];
    };

    ModelReceivable.prototype.registerModel = function(Model, name) {
      if (name == null) {
        name = Model.name;
      }
      name = "Model/" + name;
      return this.modelClasses[name] = {
        name: name,
        Model: Model
      };
    };

    return ModelReceivable;

  })(Trait);

  ModelProvidable = (function(superClass) {
    extend(ModelProvidable, superClass);

    function ModelProvidable() {
      return ModelProvidable.__super__.constructor.apply(this, arguments);
    }

    ModelProvidable.prototype.providerModelManager = null;

    ModelProvidable.modelClasses = null;

    ModelProvidable.prototype.initialize = function() {
      this.registerCustomNormalize(this.normalizeModel.bind(this));
      this.providerModelManager = new ProviderModelManager(this);
      return this.modelClasses = {};
    };

    ModelProvidable.prototype.registerModel = function(_Model, name) {
      if (name == null) {
        name = _Model.name;
      }
      name = "Model/" + name;
      this.modelClasses[name] = {
        name: name,
        Model: _Model
      };
      return _Model.prototype.__mc_type = name;
    };

    ModelProvidable.prototype.normalizeModel = function(model) {
      if (!(model instanceof Leaf.Model)) {
        return null;
      }
      if (!model.__mc_type) {
        return null;
      }
      this.providerModelManager.manage(model);
      return {
        __mc_type: model.__mc_type,
        props: model.toJSON(),
        modelId: model._modelId
      };
    };

    return ModelProvidable;

  })(Trait);

  ProviderModelManager = (function() {
    ProviderModelManager.prototype.modelIdIndex = 10000;

    function ProviderModelManager(layer) {
      this.layer = layer;
      this.models = {};
      this.setup();
    }

    ProviderModelManager.prototype.setup = function() {
      this.layer.messageCenter.registerApi("modelProvider/get", (function(_this) {
        return function(id, callback) {
          var modelInfo;
          if (modelInfo = _this.models[detail.id]) {
            return callback(null, modelInfo.model.toJSON());
          } else {
            return callback(new Error("Not Found"));
          }
        };
      })(this));
      this.layer.messageCenter.registerApi("modelProvider/unwatch", (function(_this) {
        return function(detail, callback) {
          var modelInfo;
          if (detail == null) {
            detail = {};
          }
          if (modelInfo = _this.models[detail.id]) {
            return _this._modelStopWatchBy(detail.watcher, modelInfo);
          } else {
            return callback(new Error("Not Found"));
          }
        };
      })(this));
      return this.layer.messageCenter.registerApi("modelProvider/watch", (function(_this) {
        return function(detail, callback) {
          var modelInfo;
          if (detail == null) {
            detail = {};
          }
          if (modelInfo = _this.models[detail.id]) {
            _this._modelWatchBy(detail.watcher, modelInfo);
            return callback();
          } else {
            return callback(new Error("Not Found"));
          }
        };
      })(this));
    };

    ProviderModelManager.prototype._modelWatchBy = function(who, modelInfo) {
      if (indexOf.call(modelInfo.watches, who) < 0) {
        modelInfo.watches.push(who);
        modelInfo.watchRef += 1;
        if (modelInfo.watchRef === 1) {
          this.bubbleModelToForeground(modelInfo);
        }
      }
    };

    ProviderModelManager.prototype._modelStopWatchBy = function(who, modelInfo) {
      if ((index = modelInfo.watches.indexOf(who)) >= 0) {
        modelInfo.watches.splice(index, 1);
        modelInfo.watchRef -= 1;
        if (modelInfo.watchRef <= 0) {
          this.stopBubbleModelToForeground(modelInfo);
        }
      }
    };

    ProviderModelManager.prototype.bubbleModelToForeground = function(modelInfo) {
      if (modelInfo.bubbling) {
        return;
      }
      modelInfo.bubbling = true;
      return modelInfo.model.listenBy(this, "change", (function(_this) {
        return function(changes) {
          return _this.layer.messageCenter.fireEvent("model/change", modelInfo.id, changes);
        };
      })(this));
    };

    ProviderModelManager.prototype.stopBubbleModelToForeground = function(modelInfo) {
      if (!modelInfo.bubbling) {
        return;
      }
      modelInfo.bubbling = false;
      return modelInfo.model.stopListenBy(this);
    };

    ProviderModelManager.prototype.manage = function(model) {
      var info;
      if (!model._modelId) {
        model._modelId = (this.modelIdIndex++).toString();
      }
      info = this.models[model._modelId];
      if (!info) {
        return this.models[model._modelId] = {
          watchRef: 0,
          watches: [],
          model: model,
          id: model._modelId
        };
      }
    };

    ProviderModelManager.prototype.revoke = function() {
      var info;
      if (!model._modelId) {
        return;
      }
      info = this.models[model._modelId];
      if (!info) {
        return false;
      }
      info.count -= 1;
      if (info.count <= 0) {
        this.models[model._modelId] = null;
      }
      return true;
    };

    return ProviderModelManager;

  })();

  Leaf.DummyModel = DummyModel;

  Leaf.Background = {
    ReceiverLayer: ReceiverLayer,
    ProviderLayer: ProviderLayer,
    IPCConnection: IPCConnection
  };

}).call(this);
