// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Leaf) {
    var Route, Router;
    Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        this.routes = [];
      }

      Router.prototype.add = function(path, callback) {
        if (typeof path !== "string" || typeof callback !== "function") {
          throw new Error("Route.add need path:string and callback:function as parameter");
        }
        return this.routes.push(new Route(path, callback));
      };

      Router.prototype.route = function(url) {
        var info, route, _i, _len, _ref, _results;
        _ref = this.routes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          route = _ref[_i];
          info = route.match(url);
          if (info) {
            _results.push(route.callback(info));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Router.prototype.monitorHash = function() {
        return window.onhashchange = (function(_this) {
          return function() {
            return _this.applyRouteByHash();
          };
        })(this);
      };

      Router.prototype.applyRouteByHash = function() {
        return this.route(window.location.hash.replace("#", ""));
      };

      return Router;

    })(Leaf.EventEmitter);
    Route = (function(_super) {
      __extends(Route, _super);

      function Route(path, callback) {
        console.assert(typeof path === "string");
        console.assert(typeof callback === "function");
        this.path = path;
        this.callback = callback;
        this.sensitive = false;
        this.strict = false;
        this.parser = this.getParser(path);
      }

      Route.prototype.match = function(url) {
        var index, key, matches, params, _i, _len, _ref;
        matches = this.parser.regexp.exec(url);
        if (!matches) {
          return null;
        }
        params = {};
        _ref = this.parser.keys;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          key = _ref[index];
          params[key] = matches[index + 1];
        }
        return {
          url: url,
          params: params
        };
      };

      Route.prototype.getParser = function(path) {
        var keyParser, keys, pathReg, pathRegStr, sensitive, strict;
        strict = this.strict;
        sensitive = this.sensitive;
        keyParser = /(\/)?:(\w+)/g;
        keys = [];
        pathRegStr = path.concat(strict && "" || "/?");
        pathRegStr = pathRegStr.replace(keyParser, function(_, slash, key) {
          keys.push(key);
          slash = slash || "";
          return "(?:{slash})([^/]+)".replace("{slash}", slash);
        });
        pathRegStr = pathRegStr.replace(/[\/.*]/g, "\\$&");
        pathReg = new RegExp("^" + pathRegStr + "$", sensitive && "" || "i");
        return {
          regexp: pathReg,
          keys: keys
        };
      };

      return Route;

    })(Leaf.EventEmitter);
    return Leaf.Router = Router;
  })(this.Leaf);

}).call(this);
