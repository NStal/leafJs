// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(Leaf) {
    var ApiManager;
    ApiManager = (function(_super) {

      __extends(ApiManager, _super);

      function ApiManager(apis) {
        this.apis = {};
        this.path = "api/";
        this.suffix = "";
        this.defaultMethod = "GET";
        this.acceptStatus = [200];
      }

      ApiManager.prototype.declare = function() {
        var api, apis, _i, _len;
        apis = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = apis.length; _i < _len; _i++) {
          api = apis[_i];
          this.initApi(api);
        }
        return this;
      };

      ApiManager.prototype.initApi = function(apiDeclare) {
        var component;
        component = this._extractApiComponent(apiDeclare);
        return this[component.name] = this._createApiByComponent(component);
      };

      ApiManager.prototype._createApiByComponent = function(component) {
        var _this = this;
        return function() {
          var body, callback, hasValue, holderIndex, i, index, lastIndex, params, placeHolder, placeHoldersValue, url, xhr, _i, _index, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
          params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          params = params.map(function(value) {
            return encodeURIComponent(value);
          });
          placeHoldersValue = [];
          if (params.length === component.placeHolders.length && (((_ref = typeof params[0]) === "undefined" || _ref === "number" || _ref === "string") || params[0] instanceof String)) {
            placeHoldersValue = params;
          } else if (params.length === 1) {
            hasValue = false;
            _ref1 = component.placeHolders;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              placeHolder = _ref1[_i];
              if (typeof params[0][placeHolder] !== "undefined") {
                hasValue = true;
                placeHoldersValue.push(params[0][placeHolder].toString());
              } else {
                placeHoldersValue.push("");
              }
            }
            if (!hasValue) {
              throw "invalid Parameter Object sent:" + JSON.stringify(params[0]);
            }
          } else if (params.length === 0) {
            _ref2 = component.placeHolders;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              placeHolder = _ref2[_j];
              placeHoldersValue.push("");
            }
          } else {
            throw "invalid parameters " + params;
          }
          url = component.url;
          body = component.body;
          lastIndex = 0;
          while (true) {
            index = -1;
            holderIndex = -1;
            _ref3 = component.placeHolders;
            for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
              placeHolder = _ref3[i];
              _index = url.indexOf("{" + placeHolder + "}", lastIndex);
              if (_index < index && _index >= 0) {
                index = _index;
                holderIndex = i;
              } else if (_index < 0 && index < 0) {
                index = -1;
              } else if (_index < 0 && index >= 0) {
                index = index;
              } else if (_index >= 0 && index < 0) {
                index = _index;
                holderIndex = i;
              }
            }
            if (index < 0) {
              break;
            }
            url = url.substring(0, index) + placeHoldersValue[holderIndex] + url.substring(index + 2 + component.placeHolders[holderIndex].length);
            lastIndex = index + placeHoldersValue[holderIndex].length;
          }
          lastIndex = 0;
          while (true) {
            index = -1;
            holderIndex = -1;
            _ref4 = component.placeHolders;
            for (i = _l = 0, _len3 = _ref4.length; _l < _len3; i = ++_l) {
              placeHolder = _ref4[i];
              _index = body.indexOf("{" + placeHolder + "}", lastIndex);
              if (_index < index && _index >= 0) {
                index = _index;
                holderIndex = i;
              } else if (_index < 0 && index < 0) {
                index = -1;
              } else if (_index < 0 && index >= 0) {
                index = index;
              } else if (_index >= 0 && index < 0) {
                index = _index;
                holderIndex = i;
              }
            }
            if (index < 0) {
              break;
            }
            body = body.substring(0, index) + placeHoldersValue[holderIndex] + body.substring(index + 2 + component.placeHolders[holderIndex].length);
            lastIndex = index + placeHoldersValue[holderIndex].length;
          }
          lastIndex = 0;
          callback = null;
          xhr = new XMLHttpRequest;
          xhr.onreadystatechange = function(state) {
            var json, _ref5;
            if (xhr.readyState === 4 && callback) {
              if (_ref5 = xhr.status, __indexOf.call(_this.acceptStatus, _ref5) < 0) {
                callback({
                  code: xhr.status
                }, null);
                return;
              }
              if (xhr.getResponseHeader("content-type") === "text/json") {
                try {
                  json = JSON.parse(xhr.responseText);
                } catch (e) {
                  callback("BROKEN JSON;", xhr.responseText);
                }
                return callback(null, json);
              } else {
                return callback(null, xhr.responseText);
              }
            }
          };
          xhr.open(component.method, url, true);
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          xhr.send(body);
          return {
            response: function(_callback) {
              return callback = _callback;
            }
          };
        };
      };

      ApiManager.prototype._extractApiComponent = function(apiDeclare) {
        var body, bodyMatch, flag, flagPos, i, length, method, methodMatch, name, placeHolder, placeHolders, regBody, regMethod, regName, regUrl, string, url, urlMatch, _i, _j, _len, _ref;
        regName = /^\w*/i;
        regUrl = /@[\w:?&=\-+\.\/{}]+/i;
        regMethod = /#[a-z]+/i;
        regBody = /\$[\w:?&=\-+\.\/{}]+/i;
        try {
          name = regName.exec(apiDeclare)[0];
        } catch (e) {
          throw "Invalid API name";
        }
        urlMatch = regUrl.exec(apiDeclare);
        url = urlMatch ? urlMatch[0].substring(1) : this.path + name + this.suffix;
        methodMatch = regMethod.exec(apiDeclare);
        method = methodMatch ? methodMatch[0].substring(1) : this.defaultMethod;
        bodyMatch = regBody.exec(apiDeclare);
        body = bodyMatch ? bodyMatch[0].substring(1) : "";
        placeHolders = [];
        _ref = [url, body];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          string = _ref[_i];
          flag = false;
          flagPos = 0;
          length = string.length;
          for (i = _j = 0; 0 <= length ? _j <= length : _j >= length; i = 0 <= length ? ++_j : --_j) {
            if (string[i] === "{") {
              if (flag === true) {
                throw "invalid {} pair " + apiDeclare;
              }
              flag = true;
              flagPos = i;
            }
            if (string[i] === "}") {
              if (flag === false) {
                throw "invalid {} pair " + apiDeclare;
              }
              flag = false;
              placeHolder = string.substring(flagPos + 1, i);
              if (__indexOf.call(placeHolders, placeHolder) < 0) {
                placeHolders.push(placeHolder);
              }
            }
          }
          if (flag === true) {
            throw "invalid {} pair " + apiDeclare;
          }
        }
        return {
          name: name,
          url: url,
          method: method,
          body: body,
          placeHolders: placeHolders
        };
      };

      return ApiManager;

    })(Leaf.EventEmitter);
    return Leaf.ApiManager = ApiManager;
  })(this.Leaf);

}).call(this);
