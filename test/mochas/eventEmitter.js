// Generated by CoffeeScript 1.7.1
(function() {
  describe("test event emitter", function() {
    it("test basic bind", function(done) {
      var et;
      et = new Leaf.EventEmitter();
      et.on("event", function(param, param2) {
        if (param !== "foo" || param2 !== "bar") {
          throw new Error("should be able to emit params correctly");
        }
        return done();
      });
      return et.emit("event", "foo", "bar");
    });
    it("test alias addListener", function(done) {
      var et;
      et = new Leaf.EventEmitter();
      et.addListener("event", function(param, param2) {
        if (param !== "foo" || param2 !== "bar") {
          throw new Error("should be able to emit params correctly");
        }
        return done();
      });
      return et.emit("event", "foo", "bar");
    });
    it("test once", function(done) {
      var et;
      et = new Leaf.EventEmitter();
      et.once("event", function(param, param2) {
        if (et._events.event.length > 0) {
          console.debug(et._events);
          throw new Error("once don't remove listener at callback");
        }
        return done();
      });
      return et.emit("event");
    });
    it("test remove listener", function(done) {
      var et, reachHere;
      et = new Leaf.EventEmitter();
      reachHere = false;
      et.on("event", function() {
        return reachHere = true;
      });
      et.removeListener("event");
      et.emit("event");
      if (!reachHere) {
        throw new Error("removeListener without a second parameter provide should have no effect");
      }
      et.on("event2", function() {
        return false;
      });
      et.removeAllListeners("event2");
      if (!et._events.event || et._events.event.length !== 1) {
        throw new Error("removeAllListener with a event name provided should't effect other event's listeners ");
      }
      if (et._events.event2 && et._events.event2.length !== 0) {
        throw new Error("removeAllListener with a event name provided and matches should have effect");
      }
      et.on("event", function() {
        return true;
      });
      et.removeAllListeners();
      if (et._events.event && et._events.event.length > 0 || et._events.event2 && et._events.event2.length > 0) {
        console.log(et._events);
        throw new Error("removeAllListener without a event name should remove all listeners");
      }
      return done();
    });
    it("bubble should work", function(done) {
      var child, parent;
      parent = new Leaf.EventEmitter();
      child = new Leaf.EventEmitter();
      parent.bubble(child, "click");
      parent.on("click", function(event) {
        if (!event || event.type !== "click") {
          throw new Error("bubble wrong data");
        }
        return done();
      });
      return child.emit("click", {
        type: "click"
      });
    });
    it("stopBubble should work", function(done) {
      var child, parent, reachHere;
      parent = new Leaf.EventEmitter();
      child = new Leaf.EventEmitter();
      parent.bubble(child, "click");
      parent.on("click", function(event) {
        throw new Error("stop bubble should work!");
      });
      parent.stopBubble(child);
      child.emit("click", {
        type: "click"
      });
      parent.removeAllListeners();
      parent.bubble(child, "click");
      reachHere = false;
      parent.on("click", function(data) {
        return reachHere = true;
      });
      parent.stopBubble(child, "notClick");
      child.emit("click");
      if (!reachHere) {
        throw new Error("stopBubble with another event shouldn't have effect");
      }
      reachHere = false;
      parent.stopBubble(child, "click");
      child.emit("click", {
        type: "click"
      });
      if (reachHere) {
        throw new Error("stopBubble with correct child and event should have effect");
      }
      return done();
    });
    it("stopAllBubbles should work", function(done) {
      var child, parent;
      parent = new Leaf.EventEmitter();
      child = new Leaf.EventEmitter();
      parent.bubble(child, "click");
      parent.on("click", function(event) {
        throw new Error("stop bubble should work!");
      });
      parent.stopAllBubbles();
      child.emit("click", {
        type: "click"
      });
      if (parent._bubbles.length > 0) {
        throw new Error("stopAllBubbles should remove all bubbles");
      }
      return done();
    });
    it("test listenBy", function(done) {
      var child, parent;
      parent = {
        name: "parent",
        onClick: function(event) {
          if (this.name !== "parent") {
            throw new Error("invalid context set");
          }
          return this.hasClick = true;
        },
        onTouch: function(event) {
          if (this.name !== "parent") {
            throw new Error("invalid context set");
          }
          return this.hasTouch = true;
        }
      };
      child = new Leaf.EventEmitter;
      child.listenBy(parent, "onClick", parent.onClick);
      child.listenBy(parent, "onTouch", parent.onTouch);
      if (child._events.onClick.length !== 1 || child._events.onTouch.length !== 1) {
        throw new Error("listenBy should set _events");
      }
      child.emit("onClick");
      child.emit("onTouch");
      if (!parent.hasClick || !parent.hasTouch) {
        throw new Error("listenBy should trigger event listeners with the contexdt");
      }
      child.stopListenBy(parent);
      if (child._events.onClick && child._events.onClick.length !== 0 || child._events.onTouch && child._events.onTouch.length !== 0) {
        throw new Error("stopListenBy should remove all the listen by");
      }
      return done();
    });
    return it("test mixin", function(done) {
      var obj;
      obj = {
        _events: {
          value: 5
        }
      };
      Leaf.EventEmitter.mixin(obj);
      if (!obj._events || !obj.on) {
        throw new Error("mixin not working");
      }
      if (obj._events.value === 5) {
        throw new Error("mixin should overwrite _events any way.");
      }
      return done();
    });
  });

}).call(this);
