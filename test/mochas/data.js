// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("test model", function() {
    it("test basic model usage", function(done) {
      var Archive, archive;
      Archive = (function(_super) {
        __extends(Archive, _super);

        Archive.prototype.fields = ["name", "id", "content", "author"];

        function Archive(data) {
          Archive.__super__.constructor.call(this, data);
        }

        return Archive;

      })(Leaf.Model);
      archive = new Archive();
      archive.has("name") || (function() {
        throw new Error("declare should works");
      })();
      archive = new Archive({
        name: "leaf.js",
        id: 1,
        content: "doc",
        author: "miku"
      });
      archive.data.name === "leaf.js" || (function() {
        throw new Error("init the first element should work");
      })();
      archive.get("name") === "leaf.js" || (function() {
        throw new Error("model.get should works");
      })();
      archive.data.id === 1 || (function() {
        throw new Error("fail to set data at init");
      })();
      archive.get("id") === 1 || (function() {
        throw new Error("fail to set data at init");
      })();
      archive.data = {
        name: "leaf.js.2"
      };
      archive.data.name === "leaf.js.2" && archive.data.id === 1 && archive.author === "miku" || (function() {
        throw new Error("fail to set data directly");
      })();
      return done();
    });
    it("test defaults", function(done) {
      var Person, person;
      Person = (function(_super) {
        __extends(Person, _super);

        function Person() {
          return Person.__super__.constructor.apply(this, arguments);
        }

        Person.prototype.fields = {
          name: null,
          sex: "female",
          avatar: "miku"
        };

        return Person;

      })(Leaf.Model);
      person = new Person();
      person.data.name === null && person.data.sex === "female" && person.avatar === "miku" || (function() {
        throw new Error("fail to set defaults");
      })();
      return done();
    });
    it("test preset/undo", function(done) {
      var Archive, archive;
      Archive = (function(_super) {
        __extends(Archive, _super);

        function Archive() {
          return Archive.__super__.constructor.apply(this, arguments);
        }

        Archive.prototype.fields = {
          hasRead: false
        };

        return Archive;

      })(Leaf.Model);
      archive = new Archive;
      archive.data.hasRead === false || (function() {
        throw new Error("fail to set fields");
      })();
      archive.preset("hasRead", true);
      archive.data.hasRead === true || (function() {
        throw new Error("fail to preset");
      })();
      archive.undo("hasRead");
      archive.data.hasRead === false || (function() {
        throw new Error("fail to undo");
      })();
      archive.preset("hasRead", true);
      archive.confirm("hasRead");
      archive.undo("hasRead");
      archive.data.hasRead === true || (function() {
        throw new Error("fail to confirm value");
      })();
      return done();
    });
    it("test to json", function(done) {
      var Archive, archive, json;
      Archive = (function(_super) {
        __extends(Archive, _super);

        function Archive() {
          return Archive.__super__.constructor.apply(this, arguments);
        }

        Archive.prototype.fields = {
          title: "untitled",
          content: "empty",
          author: "miku"
        };

        return Archive;

      })(Leaf.Model);
      archive = new Archive;
      json = archive.toJSON({
        fields: ["title", "content"]
      });
      Object.keys(json).length === 2 && json.title === "untitled" && json.content === "empty" || (function() {
        throw new Error("toJSON failed");
      })();
      return done();
    });
    return it("test event", function(done) {
      var Archive, archive, change, readChanged, starValue;
      Archive = (function(_super) {
        __extends(Archive, _super);

        function Archive() {
          return Archive.__super__.constructor.apply(this, arguments);
        }

        Archive.prototype.fields = {
          hasRead: false,
          star: false
        };

        return Archive;

      })(Leaf.Model);
      archive = new Archive();
      readChanged = 0;
      starValue = 0;
      change = 0;
      archive.on("change/hasRead", function() {
        return readChanged++;
      });
      archive.on("change/star", function(value) {
        return starValue = value;
      });
      archive.on("change", function() {
        return change++;
      });
      archive.data.hasRead = false;
      archive.data.hasRead = true;
      archive.star = true;
      change === 2 && readChanged === 1 && starValue === true || (function() {
        throw new Error("change event failed");
      })();
      return done();
    });
  });

  describe("test collection", function() {
    it("basic tests", function(done) {
      var Archive, ArchiveList, a1, a2, col;
      ArchiveList = (function(_super) {
        __extends(ArchiveList, _super);

        function ArchiveList() {
          ArchiveList.__super__.constructor.call(this);
          this.setId("id");
        }

        return ArchiveList;

      })(Leaf.Collection);
      Archive = (function(_super) {
        __extends(Archive, _super);

        function Archive() {
          return Archive.__super__.constructor.apply(this, arguments);
        }

        Archive.prototype.fields = ["id", "title", "content", "author"];

        return Archive;

      })(Leaf.Model);
      a1 = new Archive({
        id: 1,
        title: "tutorial",
        content: "foo and bar",
        author: "miku"
      });
      a2 = new Archive({
        id: 2,
        title: "tutorial2",
        content: "foo and bar2",
        author: "miku"
      });
      col = new ArchiveList();
      col.add(a1);
      col.add(a2);
      col.length === 2 && col.contain(a1) && col.contain(a2) && col.contain(a1.data.id) || (function() {
        throw new Error("collection fails");
      })();
      col.findOne({
        author: "miku"
      }).data.title === "tutorial" || (function() {
        throw new Error("fail to find one");
      })();
      col.find({
        author: "miku"
      }).length === 2 || (function() {
        throw new Error("fail to call collection.find");
      })();
      col.remove(a1) && col.length === 1 || (function() {
        throw new Error("fail to remove item");
      })();
      col.empty() && col.length === 0 || (function() {
        throw new Error("fail to empty collection");
      })();
      return done();
    });
    return it("test events", function(done) {
      var changeModel, changeValue, col, model;
      col = new Leaf.Collection();
      model = new Leaf.Model();
      model.declare("value", "id");
      col.add(model);
      changeModel = false;
      changeValue = false;
      col.on("change/model", function(_model) {
        if (_model !== model) {
          throw new Error("fail to listen change model");
        }
        return changeModel = true;
      });
      col.on("change/model/value", function(model, k, v) {
        changeValue = true;
        return k === "value" && v === 1 || (function() {
          throw new Error("change fails");
        })();
      });
      model.data.value = 1;
      changeModel && changeValue || (function() {
        throw new Error("collection events fails");
      })();
      return done();
    });
  });

}).call(this);
