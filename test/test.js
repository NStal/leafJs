// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module("basic");

  test("leafJs should be loaded", function() {
    console.assert(Leaf);
    console.assert(Leaf.Widget);
    console.assert(Leaf.EventEmitter);
    return ok(!!Leaf);
  });

  module("EventEmitter");

  test("leafJs event emitter should work", function() {
    var em, recieveEvent;
    em = new Leaf.EventEmitter();
    recieveEvent = false;
    em.on("event", function() {
      return recieveEvent = true;
    });
    em.trigger("event");
    return ok(recieveEvent);
  });

  test("leafJs event emitter remove event listemer should work", function() {
    var em, emchild, handler, recieveEvent, someone;
    em = new Leaf.EventEmitter();
    recieveEvent = false;
    handler = function() {
      return recieveEvent = true;
    };
    em.on("event", handler);
    em.trigger("event");
    ok(recieveEvent);
    recieveEvent = false;
    em.removeListener("event", handler);
    em.trigger("event");
    ok(!recieveEvent);
    em.on("eventA", handler);
    em.removeAllListeners("eventA");
    em.trigger("event");
    ok(!recieveEvent);
    em.once("event", handler);
    em.trigger("event");
    ok(recieveEvent);
    recieveEvent = false;
    em.trigger("event");
    ok(!recieveEvent);
    recieveEvent = false;
    emchild = new Leaf.EventEmitter;
    em.bubble(emchild, "child");
    em.on("child", function(a1, a2) {
      recieveEvent = true;
      ok(a1 === 1);
      return ok(a2 === 2);
    });
    emchild.emit("child", 1, 2);
    ok(recieveEvent);
    recieveEvent = false;
    em.stopBubble(emchild, "child");
    emchild.emit("child", 1, 2);
    ok(!recieveEvent);
    someone = {};
    recieveEvent = false;
    em.listenBy(someone, "event", function() {
      return recieveEvent = true;
    });
    em.emit("event");
    ok(recieveEvent);
    ok(em._events["event"].length === 1);
    em.stopListenBy(someone);
    ok(em._events["event"].length === 0);
    recieveEvent = false;
    em.emit("event");
    return ok(!recieveEvent);
  });

  module("Model and Collection");

  test("Basic model should work", function() {
    var TestCollection, TestModel, change, changeAgain, collection, data, e, error, model, modelSameId, recieveEvent, result;
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        TestModel.__super__.constructor.call(this);
        this.declare("id");
        this.declare("name");
      }

      return TestModel;

    })(Leaf.Model);
    model = new TestModel();
    ok(model instanceof Leaf.Model);
    ok(model instanceof TestModel);
    error = false;
    try {
      model.get("undef");
    } catch (_error) {
      e = _error;
      error = true;
    }
    ok(error);
    error = false;
    ok(typeof (model.get("id")) === "undefined");
    ok((model.get("id", "default")) === "default");
    model.set("id", 5);
    ok((model.get("id", 6)) === 5);
    data = model.data;
    ok(data.id === 5);
    recieveEvent = false;
    model.on("change/id", function(id) {
      return recieveEvent = true;
    });
    model.set("id", 6);
    ok(data.id === 6);
    ok(recieveEvent);
    recieveEvent = false;
    data.id = 7;
    ok(recieveEvent);
    ok(model.get("id") === 7);
    model.sets({
      undef: 5
    });
    ok(typeof data.undef === "undefined");
    model.sets({
      id: 10,
      name: "model"
    });
    ok(data.id === 10);
    ok(data.name === "model");
    model.data = {
      id: 11,
      name: "modelAgain"
    };
    ok(data.id === 11);
    ok(data.name === "modelAgain");
    TestCollection = (function(_super) {
      __extends(TestCollection, _super);

      function TestCollection() {
        TestCollection.__super__.constructor.call(this);
      }

      return TestCollection;

    })(Leaf.Collection);
    collection = new TestCollection();
    error = false;
    try {
      collection.add({});
    } catch (_error) {
      e = _error;
      error = true;
    }
    ok(error);
    ok(!collection.get({}));
    ok(!collection.exists({}));
    ok(!collection.remove({}));
    model = new TestModel();
    model.data = {
      id: 5,
      name: "first"
    };
    recieveEvent = false;
    collection.once("add", function(who) {
      recieveEvent = true;
      return ok(who === model);
    });
    collection.add(model);
    ok(recieveEvent);
    ok(collection.length === 1);
    ok(collection.exists(model));
    ok(!collection.exists({
      id: model.data.id
    }));
    recieveEvent = false;
    collection.add(model);
    ok(collection.length === 1);
    ok(!recieveEvent);
    modelSameId = new TestModel();
    modelSameId.data = {
      id: 5,
      name: "second"
    };
    collection.add(modelSameId);
    ok(collection.length === 2);
    error = false;
    try {
      collection.setId("id");
    } catch (_error) {
      e = _error;
      error = true;
    }
    ok(error);
    collection.empty();
    ok(collection.length === 0);
    collection.setId("id");
    collection.add(model);
    ok(collection.length === 1);
    console.log(model.data);
    console.log(model.toJSON());
    ok(model._events["destroy"].length === 1);
    ok(model.data.id === 5);
    ok(model.data.name === "first");
    ok(collection.exists(modelSameId));
    result = collection.add(modelSameId);
    ok(result === model);
    ok(model.data.id === 5);
    ok(collection.length === 1);
    ok(model.data.name === "second");
    recieveEvent = false;
    collection.once("remove", function() {
      return recieveEvent = true;
    });
    collection.remove(modelSameId);
    ok(recieveEvent === true);
    ok(collection.length === 0);
    ok(model._events["destroy"].length === 0);
    recieveEvent = false;
    collection.add(model);
    collection.once("destroy/model", function(target) {
      recieveEvent = true;
      return ok(target === model);
    });
    try {
      model.destroy();
    } catch (_error) {
      e = _error;
      console.error(e);
      console.error(e.stack);
    }
    ok(recieveEvent);
    ok(collection.length === 0);
    model = new TestModel();
    model.data = {
      id: 10,
      name: "model"
    };
    collection.add(model);
    console.log(model._defines);
    change = false;
    changeAgain = false;
    collection.once("change/model", function(changeModel) {
      change = true;
      return ok(changeModel === model);
    });
    collection.once("change/model/name", function(changeModel, key, value) {
      changeAgain = true;
      ok(changeModel === model);
      ok(key === "name");
      return ok(value === "newName");
    });
    model.data.name = "newName";
    ok(change);
    return ok(changeAgain);
  });

  module("EnhancedWidget");

  test("basic widget test", function() {
    var widget;
    widget = new Leaf.Widget("#widget-a");
    ok(widget);
    return ok(widget.node.id === "widget-a");
  });

  test("enhanced widget test", function() {
    var template, w;
    template = "<div data-id='root' data-attribute='data-test:test'>\n<div data-id='testClass' class='A B C' data-class='someClass'>\n</div>\n<input data-id='testValue' data-value='someValue'>\n</input>\n<div data-id='testAttributeMulti' data-attribute='a1:a1,a2:a2'>\n</div>\n<div data-id='testHTML' data-html='someHTML'>\n</div>\n<div data-id='testText' data-text='someText'>\n</div>\n</div> ";
    w = new Leaf.Widget(template);
    ok(w);
    ok(w.renderData);
    ok(w.renderDataModel);
    ok(w.renderDataModel.has("test"));
    ok(w.renderDataModel.has("someClass"));
    ok(w.renderDataModel.has("someValue"));
    ok(w.renderDataModel.has("a1"));
    ok(w.renderDataModel.has("a2"));
    ok(w.renderDataModel.has("someHTML"));
    ok(w.renderDataModel.has("someText"));
    w.renderData.test = "value";
    ok(w.node$.attr("data-test") === "value");
    w.renderData.someClass = "D";
    ok(w.UI.testClass.classList.contains("D"));
    ok(w.UI.testClass.classList.contains("A"));
    w.renderData.someClass = "E";
    ok(w.UI.testClass.classList.contains("E"));
    ok(w.UI.testClass.classList.contains("A"));
    ok(!w.UI.testClass.classList.contains("D"));
    w.renderData.someValue = "someValue";
    ok(w.UI.testValue.value === "someValue");
    w.renderData.a1 = "123";
    w.renderData.a2 = "456";
    ok(w.UI.testAttributeMulti.getAttribute("a1") === "123");
    ok(w.UI.testAttributeMulti.getAttribute("a2") === "456");
    w.renderData.someHTML = "<div id='abc'></div>";
    ok(w.node$.find("#abc").length === 1);
    w.renderData.someText = "<div id='efg'></div>";
    ok(w.node$.find("#efg").length === 0);
    ok(w.UI.testText$.text() === "<div id='efg'></div>");
    console.log(w.node);
    w.renderData = {
      a1: "a1",
      someClass: "X"
    };
    ok(w.renderData.a1 === "a1");
    ok(w.renderData.someClass === "X");
    return ok(w.renderData.a2 === "456");
  });

}).call(this);
