// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module("basic");

  test("leafJs should be loaded", function() {
    console.assert(Leaf);
    console.assert(Leaf.Widget);
    console.assert(Leaf.EventEmitter);
    return ok(!!Leaf);
  });

  module("EventEmitter");

  test("leafJs event emitter should work", function() {
    var em, recieveEvent;
    em = new Leaf.EventEmitter();
    recieveEvent = false;
    em.on("event", function() {
      return recieveEvent = true;
    });
    em.trigger("event");
    return ok(recieveEvent);
  });

  test("leafJs event emitter remove event listemer should work", function() {
    var em, emchild, handler, recieveEvent, someone;
    em = new Leaf.EventEmitter();
    recieveEvent = false;
    handler = function() {
      return recieveEvent = true;
    };
    em.on("event", handler);
    em.trigger("event");
    ok(recieveEvent);
    recieveEvent = false;
    em.removeListener("event", handler);
    em.trigger("event");
    ok(!recieveEvent);
    em.on("eventA", handler);
    em.removeAllListeners("eventA");
    em.trigger("event");
    ok(!recieveEvent);
    em.once("event", handler);
    em.trigger("event");
    ok(recieveEvent);
    recieveEvent = false;
    em.trigger("event");
    ok(!recieveEvent);
    recieveEvent = false;
    emchild = new Leaf.EventEmitter;
    em.bubble(emchild, "child");
    em.on("child", function(a1, a2) {
      recieveEvent = true;
      ok(a1 === 1);
      return ok(a2 === 2);
    });
    emchild.emit("child", 1, 2);
    ok(recieveEvent);
    recieveEvent = false;
    em.stopBubble(emchild, "child");
    emchild.emit("child", 1, 2);
    ok(!recieveEvent);
    someone = {};
    recieveEvent = false;
    em.listenBy(someone, "event", function() {
      return recieveEvent = true;
    });
    em.emit("event");
    ok(recieveEvent);
    ok(em._events["event"].length === 1);
    em.stopListenBy(someone);
    ok(em._events["event"].length === 0);
    recieveEvent = false;
    em.emit("event");
    return ok(!recieveEvent);
  });

  test("EventEmitter.mixin should works as EventEmitter", function() {
    var em, emchild, handler, obj, obj2, recieveEvent, someone;
    obj = {};
    em = Leaf.EventEmitter.mixin(obj);
    recieveEvent = false;
    handler = function() {
      return recieveEvent = true;
    };
    em.on("event", handler);
    em.trigger("event");
    ok(recieveEvent);
    recieveEvent = false;
    em.removeListener("event", handler);
    em.trigger("event");
    ok(!recieveEvent);
    em.on("eventA", handler);
    em.removeAllListeners("eventA");
    em.trigger("event");
    ok(!recieveEvent);
    em.once("event", handler);
    em.trigger("event");
    ok(recieveEvent);
    recieveEvent = false;
    em.trigger("event");
    ok(!recieveEvent);
    recieveEvent = false;
    obj2 = {};
    emchild = Leaf.EventEmitter.mixin(obj2);
    em.bubble(emchild, "child");
    em.on("child", function(a1, a2) {
      recieveEvent = true;
      ok(a1 === 1);
      return ok(a2 === 2);
    });
    emchild.emit("child", 1, 2);
    ok(recieveEvent);
    recieveEvent = false;
    em.stopBubble(emchild, "child");
    emchild.emit("child", 1, 2);
    ok(!recieveEvent);
    someone = {};
    recieveEvent = false;
    em.listenBy(someone, "event", function() {
      return recieveEvent = true;
    });
    em.emit("event");
    ok(recieveEvent);
    ok(em._events["event"].length === 1);
    em.stopListenBy(someone);
    ok(em._events["event"].length === 0);
    recieveEvent = false;
    em.emit("event");
    return ok(!recieveEvent);
  });

  module("Util tests");

  test("Util tests", function() {
    var c, o;
    ok(Leaf.Util.isHTMLElement(document.createElement("div")));
    ok(!Leaf.Util.isHTMLElement(document.createTextNode("yes!")));
    ok === Leaf.Util.isHTMLNode(document.createTextNode("yes!"));
    ok(Leaf.Util.capitalize("abc") === "Abc");
    o = {
      a: 5,
      b: {},
      c: [1, 2, 3]
    };
    c = Leaf.Util.clone(o);
    ok(c.a === o.a);
    ok(c.b !== o.b);
    ok(c.c.length === 3);
    return ok(Leaf.Util.compare({
      a: 5,
      b: [
        1, 2, {
          k: 2
        }
      ]
    }, {
      a: 5,
      b: [
        1, 2, {
          k: 2
        }
      ]
    }));
  });

  module("KeyEventManager");

  test("KeyEventManager test", function() {
    var KeyEventManager, input1, input2, km, km2;
    KeyEventManager = Leaf.KeyEventManager;
    km = new KeyEventManager();
    km2 = new KeyEventManager();
    input1 = document.createElement("input");
    input2 = document.createElement("input");
    km.attachTo(input1);
    km2.attachTo(input2);
    km.master();
    km2.master();
    ok(KeyEventManager.stack.length === 1);
    ok(KeyEventManager.current === km2);
    km2.unmaster();
    ok(KeyEventManager.stack.length === 0);
    ok(KeyEventManager.current === km);
    km.unmaster();
    ok(KeyEventManager.stack.length === 0);
    ok(!KeyEventManager.current);
    km.master();
    km2.master();
    ok(km.isActive = true);
    ok(km2.isActive = true);
    KeyEventManager.disable();
    KeyEventManager.enable();
    return ok(!km.unmaster());
  });

  module("Model and Collection");

  test("Basic model should work", function() {
    var TestCollection, TestModel, change, changeAgain, changed, collection, data, desCounter, destroyed, e, error, json, length, m1, m2, m3, model, modelSameId, obj, prop, recieveEvent, result;
    TestModel = (function(_super) {
      __extends(TestModel, _super);

      function TestModel() {
        TestModel.__super__.constructor.call(this);
        this.declare(["id", "name"]);
      }

      return TestModel;

    })(Leaf.Model);
    model = new TestModel();
    ok(model instanceof Leaf.Model);
    ok(model instanceof TestModel);
    error = false;
    try {
      model.get("undef");
    } catch (_error) {
      e = _error;
      error = true;
    }
    ok(error);
    error = false;
    ok(typeof (model.get("id")) === "undefined");
    ok((model.get("id", "default")) === "default");
    model.set("id", 5);
    ok((model.get("id", 6)) === 5);
    data = model.data;
    ok(data.id === 5);
    recieveEvent = false;
    model.on("change/id", function(id) {
      return recieveEvent = true;
    });
    model.set("id", 6);
    ok(data.id === 6);
    ok(recieveEvent);
    recieveEvent = false;
    data.id = 7;
    ok(recieveEvent);
    ok(model.get("id") === 7);
    model.sets({
      undef: 5
    });
    ok(typeof data.undef === "undefined");
    model.sets({
      id: 10,
      name: "model"
    });
    ok(data.id === 10);
    ok(data.name === "model");
    model.data = {
      id: 11,
      name: "modelAgain"
    };
    ok(data.id === 11);
    ok(data.name === "modelAgain");
    TestCollection = (function(_super) {
      __extends(TestCollection, _super);

      function TestCollection() {
        TestCollection.__super__.constructor.call(this);
      }

      return TestCollection;

    })(Leaf.Collection);
    collection = new TestCollection();
    error = false;
    try {
      collection.add({});
    } catch (_error) {
      e = _error;
      error = true;
    }
    ok(error);
    ok(!collection.get({}));
    ok(!collection.exists({}));
    ok(!collection.remove({}));
    model = new TestModel();
    model.data = {
      id: 5,
      name: "first"
    };
    recieveEvent = false;
    collection.once("add", function(who) {
      recieveEvent = true;
      return ok(who === model);
    });
    collection.add(model);
    ok(recieveEvent);
    ok(collection.length === 1);
    ok(collection.exists(model));
    ok(!collection.exists({
      id: model.data.id
    }));
    recieveEvent = false;
    collection.add(model);
    ok(collection.length === 1);
    ok(!recieveEvent);
    modelSameId = new TestModel();
    modelSameId.data = {
      id: 5,
      name: "second"
    };
    collection.add(modelSameId);
    ok(collection.length === 2);
    error = false;
    try {
      collection.setId("id");
    } catch (_error) {
      e = _error;
      error = true;
    }
    ok(error);
    collection.empty();
    ok(collection.length === 0);
    collection.setId("id");
    collection.add(model);
    ok(collection.length === 1);
    console.log(model.data);
    console.log(model.toJSON());
    ok(model._events["destroy"].length === 1);
    ok(model.data.id === 5);
    ok(model.data.name === "first");
    ok(collection.exists(modelSameId));
    result = collection.add(modelSameId);
    ok(result === model);
    ok(model.data.id === 5);
    ok(collection.length === 1);
    ok(model.data.name === "second");
    recieveEvent = false;
    collection.once("remove", function() {
      return recieveEvent = true;
    });
    collection.remove(modelSameId);
    ok(recieveEvent === true);
    ok(collection.length === 0);
    ok(model._events["destroy"].length === 0);
    recieveEvent = false;
    collection.add(model);
    collection.once("destroy/model", function(target) {
      recieveEvent = true;
      return ok(target === model);
    });
    try {
      model.destroy();
    } catch (_error) {
      e = _error;
      console.error(e);
      console.error(e.stack);
    }
    ok(recieveEvent);
    ok(collection.length === 0);
    model = new TestModel();
    model.data = {
      id: 10,
      name: "model"
    };
    collection.add(model);
    console.log(model._defines);
    change = false;
    changeAgain = false;
    collection.once("change/model", function(changeModel) {
      change = true;
      return ok(changeModel === model);
    });
    collection.once("change/model/name", function(changeModel, key, value) {
      changeAgain = true;
      ok(changeModel === model);
      ok(key === "name");
      return ok(value === "newName");
    });
    model.data.name = "newName";
    ok(change);
    ok(changeAgain);
    model = new TestModel();
    ok(!model.data.id);
    ok(!model.data.name);
    model.defaults({
      id: 100,
      name: "100"
    });
    ok(model.id === 100);
    ok(model.name === "100");
    model = new TestModel();
    model.id = 99;
    model.defaults({
      id: 100,
      name: "100"
    });
    ok(model.id === 99);
    ok(model.name === "100");
    model.reset();
    ok(model.id === 100);
    ok(model.name === "100");
    model = new TestModel();
    ok("theName" === model.get("name", "theName"));
    changed = false;
    model.on("change/name", function() {
      return changed = true;
    });
    model.set("name", "name");
    ok(changed);
    changed = false;
    model.set("name", "name");
    ok(changed = true);
    changed = false;
    model.name = "name";
    ok(changed === false);
    ok(model.name === "name");
    model.preset("name", "changedName");
    ok(model.name === "changedName");
    model.undo();
    ok(model.name === "name");
    model.preset("name", "changedName");
    model.preset("id", "changedId");
    model.undo("name");
    ok(model.name === "name");
    ok(model.id === "changedId");
    model.confirm();
    ok(model.id === "changedId");
    ok(model.name === "name");
    model.undo();
    ok(model.id === "changedId");
    ok(model.name === "name");
    json = model.toJSON();
    ok(json.id === "changedId");
    ok(json.name === "name");
    length = 0;
    for (prop in json) {
      length++;
    }
    ok(length === 2);
    model.set("id", [
      1, 2, {
        toJSON: function() {
          return 100;
        }
      }
    ]);
    console.debug(model.id, "yes!");
    json = model.toJSON();
    console.debug(json);
    ok(json.id[2] === 100);
    ok(json.id.length === 3);
    model.retain();
    destroyed = false;
    model.on("destroy", function() {
      return destroyed = true;
    });
    model.release();
    ok(destroyed);
    ok(model.isDestroy);
    m1 = new TestModel();
    m1.data = {
      id: 1,
      name: "m1"
    };
    m2 = new TestModel();
    m2.data = {
      id: 2,
      name: "m2"
    };
    m3 = new TestModel();
    collection = new TestCollection();
    collection.setId("id");
    collection.add(m1);
    collection.add(m2);
    ok(collection.get(m1) === m1);
    ok(collection.get(m1.id) === m1);
    ok(!collection.get({}));
    ok(!collection.get(m3));
    ok(collection.find().length === 2);
    ok(collection.find({}).length === 2);
    ok(collection.find({
      id: 1
    }).length === 1);
    ok(collection.find({
      invalid: 1
    }).length === 0);
    desCounter = 0;
    collection.on("remove", function() {
      return desCounter++;
    });
    collection.destroy();
    ok(desCounter === 2);
    ok(collection.length === 0);
    model = new TestModel();
    json = model.toJSON();
    length = 0;
    for (prop in json) {
      length++;
    }
    ok(length === 0);
    json = model.toJSON({
      complete: true
    });
    for (prop in json) {
      length++;
    }
    ok(length === 2);
    obj = {
      a: 5
    };
    return model.id = obj;
  });

  module("EnhancedWidget");

  test("basic widget test", function() {
    var elemWidget, richWidget, strWidget, widget;
    widget = new Leaf.Widget("#widget-a");
    ok(widget);
    ok(widget.node.id === "widget-a");
    strWidget = new Leaf.Widget("<div data-id='self'><div data-id='child'></div></div>");
    ok(strWidget.UI.self === strWidget.node);
    ok(strWidget.UI.child);
    ok(strWidget.node.contains(strWidget.UI.child));
    elemWidget = new Leaf.Widget(document.querySelector("#widget-b"));
    ok(elemWidget.node);
    ok(!(new Leaf.Widget()).isValid);
    elemWidget.initTemplate("<div id='widget-b'>text<div data-id='newChild'></div></div>");
    ok(elemWidget.node.parentElement === document.body);
    ok(elemWidget.node$.text() === "text");
    ok(elemWidget.UI.newChild);
    richWidget = new Leaf.Widget("<div><widget data-widget='childWidget'></widget></div>");
    richWidget.childWidget = new Leaf.Widget();
    richWidget.initSubWidgets();
    ok(richWidget.childWidget.node.parentElement === richWidget.node);
    richWidget.appendTo(elemWidget);
    ok(richWidget.node.parentElement === elemWidget.node);
    richWidget.appendTo(document.body);
    ok(richWidget.node.parentElement === document.body);
    richWidget.replace(elemWidget);
    ok(richWidget.node.parentElement === document.body);
    return ok(!elemWidget.node.parentElement);
  });

  test("enhanced widget test", function() {
    var template, w;
    template = "<div data-id='root' data-attribute='data-test:test'>\n<div data-id='testClass' class='A B C' data-class='someClass'>\n</div>\n<input data-id='testValue' data-value='someValue'>\n</input>\n<div data-id='testAttributeMulti' data-attribute='a1:a1,a2:a2'>\n</div>\n<div data-id='testHTML' data-html='someHTML'>\n</div>\n<div data-id='testText' data-text='someText'>\n</div>\n</div> ";
    w = new Leaf.Widget(template);
    ok(w);
    ok(w.renderData);
    ok(w.renderDataModel);
    ok(w.renderDataModel.has("test"));
    ok(w.renderDataModel.has("someClass"));
    ok(w.renderDataModel.has("someValue"));
    ok(w.renderDataModel.has("a1"));
    ok(w.renderDataModel.has("a2"));
    ok(w.renderDataModel.has("someHTML"));
    ok(w.renderDataModel.has("someText"));
    w.renderData.test = "value";
    ok(w.node$.attr("data-test") === "value");
    w.renderData.someClass = "D";
    ok(w.UI.testClass.classList.contains("D"));
    ok(w.UI.testClass.classList.contains("A"));
    w.renderData.someClass = "E";
    ok(w.UI.testClass.classList.contains("E"));
    ok(w.UI.testClass.classList.contains("A"));
    ok(!w.UI.testClass.classList.contains("D"));
    w.renderData.someValue = "someValue";
    ok(w.UI.testValue.value === "someValue");
    w.renderData.a1 = "123";
    w.renderData.a2 = "456";
    ok(w.UI.testAttributeMulti.getAttribute("a1") === "123");
    ok(w.UI.testAttributeMulti.getAttribute("a2") === "456");
    w.renderData.someHTML = "<div id='abc'></div>";
    ok(w.node$.find("#abc").length === 1);
    w.renderData.someText = "<div id='efg'></div>";
    ok(w.node$.find("#efg").length === 0);
    ok(w.UI.testText$.text() === "<div id='efg'></div>");
    console.log(w.node);
    w.renderData = {
      a1: "a1",
      someClass: "X"
    };
    ok(w.renderData.a1 === "a1");
    ok(w.renderData.someClass === "X");
    return ok(w.renderData.a2 === "456");
  });

  asyncTest("test RestApiFactory", function() {
    var factory, testApi;
    factory = new Leaf.RestApiFactory();
    testApi = factory.create({
      url: "apiResponse.json",
      method: "GET"
    });
    expect(2);
    return testApi({}, function(err, data) {
      console.assert(!err);
      console.assert(data instanceof Array);
      ok(true);
      testApi = factory.create({
        url: ":name/测试",
        method: "GET"
      });
      return testApi({
        name: "apiResponse.json"
      }, function(err, data) {
        console.error(err, data);
        console.assert(!err);
        console.assert(data instanceof Array);
        ok(true);
        return start();
      });
    });
  });

}).call(this);
